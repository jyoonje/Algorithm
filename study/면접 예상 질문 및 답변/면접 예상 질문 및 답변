면접 질문 공부.

면접 꿀팁: 
1) 잘 모르는 질문을 받았을 때: 질문과 관련한 비슷한 지식으로 답변을 함. 그 후에 질문에 대한 답변을 역질문함.(기술에 대해 열린 마인드라는 점을 어필) 또한 "잘 모르겠습니다"라는 식의 답변은 이후 진행되는 면접의 분위기를 다운시킴.

2) "회사에 궁금한 점은 있나요?" 에 대한 답변: 질문 꼭 해야한다. 내가 이 회사에 관심이 있다는걸 어필할 수 있는 기회. 
ex) 받은 질문 중 몰랐던 질문에 대해서 설명해달라 물어봄, 사수가 있는지, 팀의 규모, 회사의 개발자분들의 경력이 얼마나 될 지, 내 포지션이 어떻게 될지, 파견을 가게 된다면 누구와 어디로 가는지, 프로젝트는 어떤걸 맡게될지, 회사 복지, 연봉

3) 면접이 끝난 후 나갈 타이밍에 면접관 칭찬하기: ex)신입 개발자로서 시니어 개발자분과 깊이 얘기할 일이 많지 않은데, 많은 지식을 알려주셔서 감사합니다. 합격 유무와 관계없이 큰 도움이 된 시간이었습니다.

면접 자체에서도 기술적으로 배우고 성장하는 과정이라고 생각하고, 너무 얼어있지 말자! 자연스러운 자세로 감정적 교감과 주어진 기회에 대한 감사함을 표하는 것이 좋다.


* (강조된 질문은 매우 단골질문. 보완하여 나의 강점을 수치화하여 잘 어필할 수 있도록 해야 함)

* 잘 모르는거 괜히 이야기 꺼내면 큰코다칩니다.

* 회사의 기술스택에 관심을 가져보세요. 학습능력이 좋음을 어떤식으로 보여줄 수 있을까요?

* 본인이 수행한 프로젝트를 유의미한 트래픽이 나올정도로 해본 경험을 높게 평가하는 회사가 많습니다.

* 두괄식으로 답변하도록 합시다. (사실 힘듭니다. 그렇게 될 수 있게끔 연습 또 연습!)

* 프로젝트를 수행할 때, 내가 이 기술을 단순히 좋아보여서 사용한 것이 아니라, 많은 고민을 했음을 보여주도록 하세요. 가장 간단한 질문으로는 '왜 그 기술을 사용했나요?', '그 기술 말고 다른 기술은 왜 사용하지 않았나요?', '대체할만한 기술이 있나요?' 등이 있습니다.


1. 기술 질문

Q: 웹 통신의 큰 흐름: https://www.google.com/ 을 접속할 때 일어나는 일
A: 클라이언트(웹 브라우저)가 https://www.google.com/ URL을 입력합니다.
클라이언트는 DNS서버에 도메인 이름을 질의하여 해당 도메인의 IP 주소를 찾습니다.
DNS 서버는 도메인 이름에 해당하는 IP 주소를 클라이언트에게 응답합니다.
클라이언트는 Google 서버의 IP 주소를 사용하여 HTTP/HTTPS 요청을 전송합니다.
Google 서버는 클라이언트의 요청을 받아 처리하고, HTTP 응답을 클라이언트에게 전송합니다.


Q: TCP와 UDP의 차이점에 대해서 설명해보세요.
A: TCP와 UDP 모두 Transport Layer에 위치하는 네트워크 통신에 사용되는 프로토콜입니다.
TCP는 클라이언트와 서버 간에 SYN, ACK를 주고받으며 연결을 유지합니다. 데이터를 순서대로 전송하고, 데이터의 신뢰성을 보장합니다. 데이터 손실 시 재전송됩니다. 따라서 웹 브라우징, 파일 전송 등의 목적으로 사용됩니다.
UDP는 클라이언트와 서버 간에 연결을 설정하지 않습니다.
데이터를 순서 없이 전송하며, 데이터 손실 시 재전송하지 않습니다. TCP보다 빠른 속도를 제공하며, 실시간 스트리밍, 온라인 게임 등 속도가 중요한 애플리케이션에 사용됩니다.


Q: api문서화를 하면서 목객체를 사용할 수 있는데 왜 swagger를 사용했나?
A: Swagger는 코드에서 자동으로 API 문서를 생성할 수 있습니다. 따라서 문서와 코드의 일관성을 유지할 수 있습니다. 또한, Swagger UI를 통해 사용자가 직접 API를 테스트해볼 수 있기에 개발자와 클라이언트 간의 협업을 돕습니다.


Q: http메서드에 대해 설명해보라.
A: get, post, put, delete가 있습니다. 
get 요청은 클라이언트가 서버에 리소스를 요청할 때 사용되며,리소스를 변경 또는 삭제하지 않고 조회할 때에만 사용됩니다. 일반적으로 Request Body가 아닌 URL 파라미터를 통해 데이터를 전달하며, 캐싱을 수행합니다.
post 요청은 서버에 새로운 리소스를 생성할 때 사용됩니다.
put 요청은 리소스를 업데이트 할 때, delete요청은 삭제할 때 사용됩니다. 보통 Request Body에 요청하는 리소스를 담아 전송합니다.


Q: mvc패턴은 어떤것을 사용했나?
A: 스프링 MVC 프레임워크를 사용하여 MVC패턴을 적용했습니다. 


Q: 본인이 팀 프로젝트에서 기여한 것들을 말해보라.
A: "Q: 본인이 팀 프로젝트에서 기여한 것들을 말해보라.


A: 기술적으로는 카드 발급 및 분실신고 CRUD와 예외 처리 클래스, 로그인 인터셉터 등 공통 기능을 구현했습니다. 또한 통합 테스트코드를 작성하여 프로젝트의 품질 향상에 기여했습니다.
팀적으로는 데이터베이스 설계 과정에 적극적으로 참여하여 데이터 모델링에 기여했습니다. 또한 깃허브와 ERDCloud를 활용하여 효과적인 버전 관리를 수행했습니다. 팀원들의 에러 핸들링을 돕고, 팀 생산성 향상을 위해 프로젝트 커밋 규칙과 코드리뷰 규칙을 세웠습니다. 이와 더불어 매주 두 번의 정기 회의를 통해 프로젝트 진행 상황을 공유하고 의견을 교환하는 등 팀워크 향상에 기여했습니다.


Q: RESTful이란 무엇이며, 이것에 대해서 아는대로 설명해보세요.
A:RESTful은 웹 서비스 설계를 위한 아키텍처 스타일입니다.
HTTP URI를 통해 자원을 표시하고GET, POST, PUT, DELETE 등의 HTTP method를 사용하여 리소스에 대한 CRUD 작업을 수행합니다. 사람이 읽을 수 있는 API라는 것이 특징입니다. HTTP를 사용하기 때문에 HTTP의 특성을 그대로 반영합니다. 
RESTful 아키텍처를 따르면 웹 서비스의 확장성, 유지보수성, 이해도 등이 향상됩니다.


Q: OSI7계층과 그 존재 이유, TCP/IP 4계층에 대해 설명해보세요.
A: OSI7계층은 네트워크 통신을 구성하는 요소들 7개의 계층으로 표준화 한 것입니다. 이렇게 표준화하는 것의 장점은 통신이 일어나는 과정을 단계별로 파악할 수 있어, 문제가 발생하면 해당 문제를 해결하기 용이해집니다.
실제로 우리가 대부분 사용하는 네트워크는 TCP/IP 4계층입니다. 통신에 실제로 사용되는 계층이고 1,2 계층이 1계층, 5, 6, 7계층이 4계층으로 운영됩니다.


Q: 국비교육과 부트캠프에서는 무엇을 배웠나?
A: 다양한 기술 스택을 배웠습니다. 구체적으로 자바, HTML, CSS, JavaScript, Oracle, JSP, Servlet, Spring 등의 기술을 학습했습니다. 이를 통해 웹 애플리케이션 개발에 필요한 기본적인 기술을 습득할 수 있었습니다.
또한 이 과정에서 자기주도적 학습법과 팀 프로젝트를 통한 협업 경험을 쌓을 수 있었습니다. 스스로 문제를 해결하고 팀원들과 소통하며 프로젝트를 진행하는 과정에서 개발자로서의 역량을 키울 수 있었습니다.


Q: 정렬 알고리즘 아는 게 있다면 하나 설명해봐라.
A: 정렬 알고리즘 중 병합 정렬에 대해 설명드리겠습니다.
병합 정렬은 분할 정복 알고리즘의 대표적인 예로, 퀵 정렬과 마찬가지로 매우 효율적인 정렬 방법입니다. 병합 정렬은 다음과 같은 과정으로 동작합니다.
첫 번째로, 입력 배열을 반으로 나눕니다.
두 번째로, 나눠진 각 부분 배열을 재귀적으로 정렬합니다.
마지막으로 정렬된 두 부분 배열을 병합하여 최종 정렬된 배열을 만듭니다.

Q: 트랜잭션에 대해서 설명해주세요.
A: 트랜잭션이란 데이터베이스의 상태를 변화시키는 하나의 논리적인 작업 단위라고 할 수 있으며, 트랜잭션에는 여러개의 연산이 수행될 수 있습니다.
트랜잭션은 수행중에 한 작업이라도 실패하면 전부 실패하고, 모두 성공해야 성공이라고 할 수 있습니다.


Q: 탐색 알고리즘에는 어떤게 있고, 특징은 무엇인지?
A: 순차 탐색, 이진 탐색, 트리 탐색이 있습니다. 순차 탐색은 배열 또는 리스트의 처음부터 끝까지 순서대로 검색하는 방식으로, 비효율적이지만 구현이 간단하고 정렬되지 않은 데이터에서도 사용할 수 있습니다.
이진 탐색은 정렬된 배열에서 중간 값을 확인하고, 찾고자 하는 값이 중간 값보다 작으면 왼쪽 부분 배열에서, 크면 오른쪽 배열에서 검색을 이어나가는 방식입니다. 매우 효율적이며, 정렬된 데이터에서 특정 값을 빠르게 찾을 수 있습니다.


Q: 정규화에 대해서 설명해주세요.
A: 정규화는 데이터의 중복방지, 무결성을 충족시키기 위해 데이터베이스를 설계하는 것을 의미합니다.


Q: 컬렉션 프레임워크의 종류에 대해 각각 설명해달라.
A: 우선, List 인터페이스가 있습니다. 순서가 있는 데이터를 표현하는 자료구조로, 대표적인 구현체로는 ArrayList와 LikedList가 있습니다. ArrayList는데이터 접근이 빠르지만 중간 삽입/삭제가 느리다는 특징이 있으며, LinkedList는 중간 삽입/삭제가 빠르지만 데이터 접근이 느리다는 특징이 있습니다.
따라서 데이터 접근이 많고 중간 삽입/삭제가 적은 경우 ArrayList를, 반대의 경우 LinkedList를 사용하는 것이 효율적입니다.
Set 인터페이스는 순서가 없고 중복을 허용하지 않는다는 특징이 있습니다. HashSet, TreeSet등의 구현체가 있으며, 데이터 중복 제거에 용이합니다.
Map 인터페이스는 키-밸류 형태로 이루어진 인터페이스로, key는 중복이 불가, value는 중복을 허용합니다. key를 이용한 빠른 데이터 접근이 가능합니다.
그 외에 Queue, Deque 인터페이스가 있습니다.


Q: 정렬, 탐색에 대해 설명해주세요.
A: 정렬은 데이터를 특정한 순서대로 배열하는 것을 말합니다.
정렬 알고리즘에는 다양한 종류가 있는데, 대표적인 것으로는 버블 정렬, 선택 정렬, 삽입 정렬, 병합 정렬, 퀵 정렬 등이 있습니다.
각 알고리즘마다 시간 복잡도가 다르며, 데이터의 특성에 따라 적합한 알고리즘을 선택해야 합니다.
탐색은 특정한 값을 찾는 것을 말합니다. 대표적인 탐색 알고리즘으로는 선형 탐색, 이진 탐색 등이 있습니다.


Q: OAuth에 대해서 간단히 설명해주세요.
A: OAuth는 제3자 인증방식 입니다. 기본적으로 사용자는 서버를 신뢰할 수 없습니다. 서버측에서도 마찬가지 입니다.
그래서 OAuth를 사용해서 신뢰할 수 있는 서버에게 정보를 맡겨놓고 접근할 수 있는 권한을 주는 것 입니다.


Q: JVM의 구조와 Java의 실행방식을 설명해주세요.
A:  JVM의 역할은 자바 애플리케이션을 클래스 로더를 통해 읽어 자바 API와 함께 실행하는 것입니다. 메모리 관리(GC)을 수행합니다. JVM의 특징으로는 컴파일된 바이트코드 파일과 하드웨어/OS 사이에서,
해당 하드웨어/OS 환경에 알맞게 기계어로 변환해준다는 것입니다. 따라서 컴파일러가 운영체제에 의존적이지 않습니다.
JVM의 구조는 클래스 로더, 실행 엔진, Runtime Data Area로 이루어져 있습니다. 
클래스 로더는 JVM내로 클래스를 로드하고 배치하는 작업을 수행합니다. 실행 엔진은 바이트 코드를 실행시키는 역할을 합니다. GC가 존재하는 위치입니다. Runtime Data Area는 프로그램 실행 중 사용되는 다양한 영역으로, Stack Area, Heap Area등이 존재합니다.
Java의 실행방식으로는 자바 컴파일러(javac)가 자바 소스코드(.java)를 읽어 자바 바이트코드(.class)로 변환시킵니다.
클래스 로더를 통해 class 파일들을 JVM으로 로딩합니다.
로딩된 class파일들은 실행 엔진을 통해 해석됩니다.
해석된 바이트코드는 Runtime Data Area에 배치되어 실질적인 수행이 이루어집니다.


Q: 동기와 비동기의 차이(블로킹, 넌블로킹) / 장단점에 대해 설명해보세요.
A: 동기 방식은 작업이 순차적으로 실행됩니다. 이전 작업이 완료되어야 다음 작업이 실행됩니다. 비동기 방식은 작업이 병렬적으로 실행됩니다. 이전 작업이 완료되지 않아도 다음 작업이 실행될 수 있습니다.
동기(블로킹) 방식의 장점으로는 순차적으로 실행되어 코드 구현이 단순하고 이해하기 쉽습니다.
단점으로는 작업이 완료될 때까지 프로그램이 멈추어 있어 응답성이 낮습니다.


Q: 접근 제어자의 종류와 이에 대해 설명해주세요.
A: private, protected, default, public이 있습니다. private은 해당 클래스 내에서만 접근 가능하고, protected는 상속한 클래스,  default는 해당 패키지, public은 전체 영역에서 접근 가능합니다.
접근 제어자를 사용하는 이유는 외부에 보여주고 싶은 정보들을 선택적으로 제공하기 위함이고, 캡슐화화 연관되어 있습니다.


Q: 객체지향에 대해서 설명해주세요.
A: 객체지향 프로그래밍은 프로그램을 객체라는 단위로 구성하는 프로그래밍 기법입니다. 마치 건설현장에서 부품들을 조립하여 건물을 만드는 과정과 유사합니다. 각 부품은 독립적으로 설계되어 상호작용하며, 이를 통해 재사용성, 유지보수성, 확장성 등의 장점을 얻을 수 있습니다.


Q: SOLID(객체지향 5대원칙)에 대해서 설명하세요.
A: SRP(단일책임원칙)은 한 클래스의 하나의 책임만 가져야 합니다.
OCP(개방-폐쇄 원칙)은 확장에는 열려 있으나 변경에는 닫혀 있어야 하며, 다형성을 활용해야 합니다.
DIP(의존관계 역전 원칙)은 구체적인 구현 내용에 의존하지 않고, 추상화된 인터페이스에 의존해야 한다는 것입니다.


Q: 멀티스레드 프로그래밍에 대해 설명해보세요.
A: 멀티스레드 프로그래밍은 하나의 프로세스에서 여러개의 스레드를 만들어 자원의 생성과 관리의 중복을 최소화하는 것입니다.


Q: 프로세스와 스레드의 차이를 설명해보세요.
A: 프로세스는 실행중인 프로그램을 의미합니다. 프로세스는 자신만의 자원을 가지지만, 스레드는 프로세스 내에서 실행되는 실행 흐름으로 자원을 공유합니다.


Q: Spring DI/IoC는 어떻게 동작하나요?
A: IoC(제어의 역전)은 프로그램의 제어 흐름을 개발자가 직접 제어하는 것이 아니라 프레임워크의 내부에서 결정된 대로 이루어집니다.
DI(의존관계 주입)은 Spring 프레임워크에서 지원하는 IoC의 형태로 클래스 사이의 의존관계를 개발자가 직접 코드로 작성하는 것이 아닌 빈 설정 정보를 바탕으로 컨테이너가 자동으로 연결해줍니다. 느슨한 결합을 위해 사용되며, 이를 통해 확장 및 유지보수에 용이한 프로그램을 개발할 수 있습니다.


Q: TDD를 알고 있나요? TDD에 대해서 어떻게 생각하나요?
A: TDD는 테스트 코드를 먼저 작성하고, 그에 맞추어 실제 구현 코드를 작성하는 개발 방법론입니다. TDD의 특징으로는 테스트 코드를 먼저 작성하기 때문에 구현 코드를 작성하는 도중에도 지속적으로 피드백을 받을 수 있으며, 테스트 코드를 통해 구현 코드의 품질을 보장할 수 있다는 장점이 있습니다.
아직 실제 프로젝트에서 TDD를 적용해본 경험은 없지만, TDD가 개발 프로세스를 개선하고 코드 품질을 높이는 데 효과적이라는 것을 잘 알고 있습니다. 비록 TDD 도입에 따른 초기 러닝커브가 있겠지만, 장기적으로는 개발 생산성과 코드 품질 향상에 큰 도움이 될 것이라고 생각합니다. 향후 기회가 된다면 TDD를 적극적으로 도입하여 실제 프로젝트에 적용해보고 싶습니다.


Q: 생성자(Constructor)에 대해 설명하세요.
A: 


Q: Spring Bean이란 무엇인가요?
A: IoC 컨테이너 안에 들어있는 객체로 필요할 때 IoC컨테이너에서 가져와서 사용합니다. @Bean 을 사용하거나 설정파일의 @Configuration을 통해 일반 객체를 Bean으로 등록할 수 있습니다.


Q: 쿼리문으로 조인까지 사용해 본 경험이 있는가?
A: 네, Oracle DB를 사용하면서 쿼리문에 join을 활용한 경험이 있습니다. join은 DB에서 여러 테이블의 데이터를 결합하여 필요한 정보를 가져오는 기능입니다. 
실제 프로젝트에서 join 기법을 사용한 예로는 상품 배송을 위한 구매자 정보를 조회하기 위해 상품 테이블의 상품 번호 컬럼과 결제목록 테이블의 상품 번호 컬럼을 내부 조인을 사용한 쿼리 등을 작성했습니다.


Q: 시큐리티나 jwt토큰 등 로그인과 관련해 설명해봐라.
A: 시큐리티는 웹 애플리케이션의 보안을 위해 사용되는 기술로, Spring Security 등의 프레임워크를 활용하여 사용자 인증, 권한 관리 등의 기능을 구현합니다. 사용자 비밀번호는 암호화되어 저장되며, 권한에 따라 리소스 접근을 제한할 수 있습니다.JWT는 사용자 인증 및 권한 부여를 위한 표준 방식입니다. 로그인 시 서버에서 사용자 정보를 기반으로 JWT 토큰을 발급하고, 클라이언트는 이 토큰을 가지고 서버에 요청을 보냅니다. 서버에서는 토큰의 유효성을 검증하여 사용자를 인증하고 권한을 확인할 수 있습니다. 


Q: 제네릭에 대해서 설명해주세요.
A: 제네릭은 자바의 타입 안정성을 맡고 있습니다. 컴파일 과정에서 타입체크를 해주는 기능으로 객체의 타입을 컴파일 시에 체크하기 때문에 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줍니다.


Q: 애노테이션에 대해서 설명해주세요.
A: 애노테이션은 인터페이스를 기반으로 한 문법으로 주석처럼 코드에 달아 클래스에 특별한 의미를 부여하거나 기능을 주입할 수 있습니다.


Q: 오버라이딩 시 @Override`를 써야하는 이유를 말해보세요.
A: @Override 어노테이션은 컴파일 시점에 오버라이딩에 대한 안정성을 부여해주기 때문에 반드시 사용하는 것이 좋습니다.


Q: 데이터베이스에서 인덱스를 사용하는 이유 및 장단점에 대해 설명해주세요.
A: 데이터베이스에서 인덱스는 데이터 검색을 빠르게 하기 위해 사용되는 데이터 구조입니다.
인덱스의 사용 이유는 인덱스를 통해 데이터를 빠르게 찾을 수 있기 때문입니다.
장점으로는 데이터를 빠르게 찾을 수 있어 쿼리 성능이 향상됩니다.
단점으로는 인덱스는 데이터 테이블과 별도로 저장되므로 추가적인 저장 공간이 필요합니다.


Q: 디자인 패턴에 대해 설명해보시오.
A: 디자인 패턴은 소프트웨어 개발에서 자주 발생하는 문제를 해결하기 위한 검증된 해결책입니다.
대표적인 디자인 패턴인 싱글톤 패턴은 애플리케이션 전역에서 하나의 인스턴스만 생성되도록 하고, 팩토리 메서드 패턴은 객체를 생성하는 책임을 서브클래스에게 위임하여 객체 생성 과정을 캡슐화하여 유연성을 높입니다.
이러한 디자인 패턴을 적용하면 코드의 가독성, 유지보수성, 확장성 등이 향상됩니다. 


Q: 클래스는 무엇이고 객체는 무엇인가요?
A: 클래스는 객체를 정의하는 틀 또는 설계도와 같은 의미로 사용됩니다.
객체는 식별 가능한 개체입니다. 객체는 구별 가능한 식별자, 특징적인 행동, 변경 가능한 상태를 가집니다. 인스턴스들을 통칭하는 용도로 사용합니다.


Q: 정적(static)이란 무엇인가요?
A: static은 클래스 멤버라고 하며, 클래스 로더가 클래스를 로딩해서 메소드 메모리 영역에 적재할 때 클래스별로 관리됩니다.
하나의 멤버를 어디서든지 참조할 수 있는 장점이 있지만, GC의 관리 영역 밖에 존재하기 때문에 프로그램 종료시까지 메모리가 할당된 채로 존재합니다


Q: 자바의 원시타입들은 무엇이 있으며 각각 몇 바이트를 차지하나요?
A: byte(1), boolean(1), char(2), short(2), int(4), long(8), float(4), double(8)

Q: 
---------------------------------------------------------------

2. 인성 질문

Q: 팀 프로젝트에서 갈등상황은 어떻게 해결했나?
A: 


*Q: 본인의 강점과 약점?
A: 


*Q: 1분 자기소개
A: 


Q: 스트레스는 평소 어떻게 관리하는가?
A: 


Q: 입사 후 본인이 원하는 개발이 아닌 경우 다른 부서에 배치되면 어떻게 할 것인가?
A: 


Q: 취미생활은 무엇인가?
A: 


Q: 공백기간은 왜 생겼는가?
A: 


*Q: 개발자가 된 이유는 무엇인가?
A: 


Q: 개발자로서의 목표가 있는지, 5년 후/10년 후 목표.
A: 


*Q: 회사에 지원하게 된 동기, 우리 회사를 선택한 이유는?
A: 

*Q: 저희 뭐하는 회사인지 아시나요?
A: 회사 홈페이지가 있는 회사도 있고 없는 회사도 있지만 어느 정도 뭐 하는 회사인지 정도는 알고 가는 게 좋고 구인 공고에 올라온 스킬에 대해 기본적인 거를 물어보니까 한 번쯤 찾아보고 가는 게 좋다. 만약 정보가 적거나 못 찾아본 경우라면 '죄송한데 제가 찾아본 결과 구인구직밖에 없어서 000회사인걸로 알고있습니다. 혹시 잘못됬다면 다시 설명해주시면 좋을것같아요.' 라고 양해를 구하는 게 좋다.








