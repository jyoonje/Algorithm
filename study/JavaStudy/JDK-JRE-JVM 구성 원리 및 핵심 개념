JDK / JRE / JVM 구성 원리 및 핵심 개념

- JDK: 자바 개발 키트 (Java Development Kit)
JDK는 JVM, JRE, Java Development Tools(javac, java, ...)를 포함한다.

Oracle JDK, Open JDK :
둘 다 오픈소스이고, Oracle JDK는 상업 버전 제외, Open JDK는 모든 버전 무료이다. Oracle JDK가 좀 더 우수한 성능의 JVM을 보유한다.


- JRE: 자바 실행 환경(Java Runtime Environment)
JVM과 자바 프로그램을 실행(동작)시킬 때 필요한 라이브러리 API를 함께 묶어서 배포되는 패키지로, 이외에도 자바 런타임 환경에서 사용하는 프로퍼티 세팅이나 리소스 파일(jar파일)을 가지고 있다.

--> Java로 프로그램을 직접 개발하려면 JDK가 필요,
     컴파일 된 Java 프로그램을 실행시키려면 JRE가 필요


- JVM: 자바 가상머신(Java Virtual Machine)
자바를 돌리는 프로그램


JVM의 특징:
컴파일된 바이트코드 파일과 하드웨어/OS 사이에서,
해당 하드웨어/OS 환경에 알맞게 기계어로 변환해준다.
-> 컴파일러가 운영체제에 의존적이지 않다. 


자바 프로그램 실행 과정:
1. javac가 소스 코드(.java)파일을 바이트 코드 파일(.class)파일로 컴파일한다.
2. 컴파일된 바이트 코드 파일이 해당 운영체제에 맞는 기계어로 변환한다.
3. JVM에 의해 변환된 기계어는 CPU에서 실행되어 사용자에게 서비스를 제공한다.

-> Java 언어는 이식성이 높다는 특징이 있다.(예시로 윈도우 환경에서 컴파일한 바이트 코드 파일은 추후에 JVM이 한번 더 기계어로 변환해주기 때문에 맥, 리눅스 환경에서도 제약없이 동작한다.) 하지만 JVM은 OS에 종속적이므로, 각 OS에 맞는 JVM을 설치해야 한다.

[ * 바이트 코드 : 가상머신(JVM, CLR 등)에서 사용되는 코드 개념으로, 가상머신이 이해할 수 있는 중간 레벨로 컴파일 한 코드이다.(반쪽짜리 컴파일 결과물이다.)
이는 어셈블리어와 유사한 형태를 띄고 있으며, 실행되기 위해서는 기계어로 한번 더 변환되어야 한다. 기계어와 달리 어떠한 환경(하드웨어, OS)에 종속적이지 않는다. ]


따라서 Java 프로그램은 OS에 종속적이지 않기 때문에 각 OS에 따른 코드를 작성하지 않고 각 OS에 맞는 JVM만 잘 설치해주면 구동된다는 된다는 장점이 있지만, 다른 프로그램과 달리 JVM을 한번 더 거쳐야 하기 떄문에 상대적으로 실행 속도가 느리다는 단점이 있다.
이 단점을 보완하기 위해 JIP컴파일러 라는 내부 프로그램을 사용해서 '필요한 부분만을 기계어로 바꾸어 줌으로써' 성능 향상을 가져왔지만, C언어의 실행 속도를 따라잡지는 못한다.(이것이 게임이나 임베디드에서 C계열 언어를 사용하는 이유이다.)
