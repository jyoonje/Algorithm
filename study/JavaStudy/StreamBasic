// 스트림의 중간연산을 이해하기 위한 간단히 함수형 인터페이스 Predicate<T> 설명

Predicate<T> : 
	함수형 인터페이스로, 
	T에대한 조건에 대해서 true / false / null 반환 (조건은 직접 구현)
	ex) .filter(name -> name.equals("이산"))  (filter() 메소드의 매개변수 타입이 Predicate<T>이다.)

	__________________________________________________________________

// 스트림의 중간연산 위주 정리

Stream 연산 - 생성	(1번)
	      중간 연산 (n번)
	      최종 연산 (1번)
※ 최종연산 코드가 실행되지 않으면 중간연산은 실행되지 않으며,
   최종연산 후에는 스트림이 제거된다.

	-------------------------------------------------------------------

Stream 중간 연산 메소드의 종류 : 
	필터링, 매핑, 정렬, 루핑

1. 필터링 : 요소를 걸러내는 작업

	1. distinct() : 중복되는 요소 제거
		- return타입 : boolean, 
		- true 인 요소 제거. 
	
	2. filter() : 원하는 기준으로 요소 제거
		- return타입: filter()메소드의 매개변수인 Predicate구현체의 반환값
		- Predicate구현체가 true를 리턴하는 요소 필터링

	-------------------------------------------------------------------

2. 매핑 : 스트림의 요소를 다른 요소로 대체하는 작업 	 

	1. flatMapXXX() : 배열이나 Object로 감싸져 있는 모든 원소를 
			단일 원소 스트림으로 반환
		- 매개변수: 모든 메소드

	2. mapXXX() : 단일 스트림의 원소를 매핑시킨 후, 매핑시킨 값을 다시 스트림으로
			반환

	3. asDoulleStream(), asLongStream() : 스트림의 타입을 각각 Double, Long으로 변환
	
	4. boxed() : intStream의 요소를 박싱한 스트림을 반환 

	-------------------------------------------------------------------

3. 정렬 : 스트림을 정렬
	정렬할 수 있는 스트림의 타입: Stream<T>, IntStream, DoubleStream,
				    LongStream

	1. Stream<T> : sorted() 메소드를 사용했을 경우
			주어진 객체를 Comparable 또는 Comparator에 따라 정렬

	       Comparable ex) 객체가 Student클래스라면, Student에서 
		     	    Comparable을 구현해서 compareTo() 메소드를 오버라이딩

	       Comparator ex) Comparator의 디폴트메소드 또는 람다식을 사용해서 구현

	2. IntStream, DoubleStream, LongStream

	-------------------------------------------------------------------

4. 루핑 : 스트림의 모든 요소를 반복
	
	1. peek() : 중간 연산 메소드로, 디버깅을 위해 존재한다.

	2. forEach() : 최종 연산메소드


	peek() 메소드와 forEach() 메소드 모두 스트림의 모든 요소를 반복하는데
	굳이 중간연산과 최종연산으로 구분한 이유: 
	  - 스트림은 최종연산이 수행되는 즉시 제거되기때문에 
	    peek()메소드는 디버깅을 지원하기 위해( ex: 특정 시점의 요소를 확인) 존재한다.







