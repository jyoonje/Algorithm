Git merge와 rebase


Git에서 merge와 rebase는 두 개의 브랜치를 통합하는 방식이지만, 그 방식과 결과물이 다르다.
Merge는 branch를 통합하는 것이고, Rebase는 branch의 base를 재설정한다는 개념의 차이가 있다.

1. Merge
Merge는 두 브랜치를 하나로 통합할 때, 기존의 두 브랜치의 커밋 기록을 그대로 유지하면서 새로운 병합 커밋을 생성한다.

특징:
 - 병합 커밋(merge commit)을 생성한다.
 - 기존 브랜치들의 히스토리를 그대로 유지하낟.
 - 두 개의 독립적인 갭발 기록이 한 브랜치에서 이어진다.

사용 상황:
 - 두 브랜치가 병렬로 진행된 서로 다른 작업을 병합해야 할 때 사용된다.
 - 히스토리를 명확하게 유지하고 싶을 때

장점:
 - 병합 과정이 명확하게 기록되어 충돌 해결 과정이 이력에 남는다.

단점:
 - 이력이 다소 복잡해질 수 있으며, 불필요한 병합 커밋이 많아질 수 있다.


2. Rebase
Rebase는 한 브랜치의 작업을 다른 브랜치의 커밋들 위로 이동시키는 방식이다.
병합 커밋을 만들지 않고, 커밋 히스토리가 깔끔하게 직선형으로 유지된다.

특징:
 - 병합 커밋 없이 히스토리를 하나의 직선으로 만든다.
 - 브랜치의 커밋을 다른 브랜치의 커밋 위로 이동시킨다.
 - 기존 커밋들이 재작성되므로 커밋 해시가 변경된다.

사용 상황:
 - 작업 히스토리를 깔끔하게 직선형으로 만들고 싶을 때
 - 협력 개발자가 많지 않을 때 사용. 특히, 공유된 브랜치에서는 충돌을 일으킬 수 있음

장점:
 - 히스토리가 깔끔하게 직선형으로 유지된다.
 - 커밋 이력이 단순해져서 이해하기 쉽다.

단점:
 - 이미 공유된 브랜치에서 rebase를 하면, 다른 협업자와 충돌이 발생할 수 있다.
 - 커밋 해시가 변경되기 때문에, 커밋 이력이 재작성된다.


3. Merge와 Rebase 차이점:
main 브랜치에서 feature 브랜치를 merge 했을 때, rebase 했을 때의 차이:
- 결과적으로 main 브랜치의 코드 상태는 feature 브랜치와 동일하게 된다. merge와 rebase 모두 브랜치 간의 코드를 통합하는 방식이지만, 히스토리 관리 방식만 다를 뿐 최종적으로 두 브랜치의 코드는 동일해진다.

- Merge: main 브랜치와 feature 브랜치의 각각의 히스토리가 보존되며, 두 브랜치가 병합되었다는 기록이 남는다.
- Rebase: feature 브랜치의 히스토리가 main 브랜치에 직선형으로 합쳐지며 깔끔하게 된다. 병합 커밋 없이 모든 커밋들이 마치 처음부터 main 브랜치에서 작업된 것처럼 보인다.




잘 설명된 블로그: https://kghworks.tistory.com/133


