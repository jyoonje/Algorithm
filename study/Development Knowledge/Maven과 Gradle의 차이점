이전에 해당 빌드 관리 도구들의 차이점이 궁금해서 공부했다가,
따로 정리해놓지 않아서 추상적인 개념으로 남아있는 탓에 정리해보는 글이다.



1. 빌드 관리 도구 (Build Tool)
Maven과 Gradle은 모두 빌드 관리 도구이다.
빌드 관리 도구는 빌드와 관리 도구로 나누어 질 수 있다. 그렇다면 빌드란?

빌드란 소스코드 파일을 컴퓨터에서 실행할 수 있는 독립적인 형태로 변환하는 과정과 결과를 말한다.
즉, 우리가 작성한 소스코드(.java), 프로젝트에서 사용된 각각의 파일 및 자원(.xm;, .jpa, jpg, .properies)을 
jvm이나 톰캣과 같은 WAS가 인식할 수 있도록 패키징하는 과정 및 결과물을 일컫는다.

따라서, 빌드를 한다면 소스코드를 컴파일해서 바이트 코드 파일(.class)로 변환하고, 
resource를 .class가 참조할 수 있는 적절한 위치로 옮기고, META-INF와 MANIFEST.MF들을 하나로 압축하는 과정을 의미한다.

그렇다면 빌드 도구란 무엇일까?
빌드 도구란, 소스코드에서 애플리케이션을 생성하면서 여러가지 외부 라이브러리를 사용하는데, 
빌드 관리 도구는 사용자가 관리할 필요 없이 필요한 라이브러리들을 자동으로 관리한다.

빌드 관리 도구는 다음과 같은 작업을 수행한다.
1) 종속성 다운로드 - 전처리(Preproccesing)
2) 소스코드를 바이너리 코드로 컴파일(Compile)
3) 바이너리 코드를 패키징(Packaging)
4) 테스트 실행(Testing)
5) 프로덕션 시스템에 배포(Distribution)


2. Maven
Maven의 정의: Maven은 Java 전용 프로젝트 관리 도구로, Lifecycle 관리 목적 빌드 도구이며, Apache Ant의 대안으로 만들어졌다.
Maven은 아파치 라이센스로 배포되는 오픈 소스 소프트웨어이다.

Maven의 특징: Lifecycle 관리 도구로, 정해진 Lifecycle에 의하여 작업을 수행하며, 전반적인 프로젝트 관리 기능을 포함하고 있다.

Maven의 Lifecycle: clean - validate - complie - test - package - verufy - install - site - deploy
1) clean: 빌드 시 생성되어 있었던 파일들을 삭제하는 단계.
2) validate: 프로젝트가 올바른지 확인하고 필요한 모든 정보를 사용할 수 있는지 확인하는 단계
3) compile: 소스코드를 컴파일하는 단계
4) test: 단위 테스트를 수행하는 단계. 테스트 실패 시 빌드 실패로 처리하며, 스킵이 가능하다.
5) package: 실제 컴파일된 소스코드와 resource들을 jar, war등 형태의 파일의 배포를 위한 패키지로 만든다.
6) verify: 통합 테스트 결과에 대한 검사를 실행하여 품질 기준을 충족하는지 확인하는 단계
7) site: 프로젝트 문서와 사이트 작성, 생성하는 단계
8) deploy: 만들어진 package를 원격 저장소에 release하는 단계

Maven은 필요한 라이브러리를 pom.xml에 정의한다. 이를 "프로젝트 모델링"이라한다.


3. Gradle
Gradle의 정의: Apache Maven과 Apache Ant에서 볼 수 있는 개념들을 사용하는 대안으로써 나온 오픈소스 프로젝트 빌드 관리 툴이다.
Groovy 언어를 사용하여 설정파일로 xml파일을 사용하는 Maven보다 코드가 간결하다.
빌드 속도가 Maven에 비해 10~100배 가량 빠르며, Java, C/C++, Python 등을 지원한다.

(Groovy란?: Groovy는 JVM에서 실행되는 스크립트 언어로, JVM에서 동작하지만 소스코드를 컴파일 할 필요 없다. 
Java와 호환되며, Java class file을 Groovy class로 사용 가능하다. Java문법과 유사하여 빌드 처리를 관리할 수 있다.)

Gradle의 특징: 
1) 가독성이 좋다: 코딩에 의한 간결한 정의가 가능하므로 가독성이 좋다
2) 재사용에 용이: 설정 주입 방식을 사용하므로 재사용에 용이하다.
3) 구조적인 장점: Build Script를 Froovy 기반의 DSL을 사용하여 코드로서 설정 정보를 구성하므로 구조적인 장점이 있다.
4) 편리성: Gradle 설치 없이 Gradle wrapper를 이용하여 빌드를 지원한다.
5) 멀티 프로젝트: Gradle은 멀티 프로젝트 빌드를 지원하기 위해 설계된 빌드 관리 도구이다.
6) 지원: Maven을 완전 지원한다.


4. Maven vs Gradle
1) 스크립트 길이와 가독성 면에서 Gradle이 우세하다.
2) 빌드와 테스트 실행 결과 Gradle이 더 빠르다.
(Gradle은 캐시를 사용하므로, 테스트 반복 시 실행 결과 시간의 차이가 더 커진다.)
3) 의존성이 늘어날수록 스크립트 품질의 차이가 더 커진다.
Maven은 멀티 프로젝트에서 특정 설정을 다른 모듈에서 사용하려면 상속받아야하지만, 
Gradle은 설정 주입 방식을 사용하므로 멀티 프로젝트에 적합하다.



참고) - velog, "Maven과 Gradle의 개념 및 비교", https://velog.io/@leesomyoung, 20240324
- Tistory, "[Spring] 빌드 관리 도구 Maven과 Gradle 비교하기", https://jisooo.tistory.com, 20240324

