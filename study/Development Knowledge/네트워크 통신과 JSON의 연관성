네트워크 통신과 단순한 함수 호출


웹 프로그래밍에서 네트워크를 통해 데이터를 전달할 때는 문자열(String) 또는 바이너리(Binary)형태의 데이터 전송만 가능하다.
이 때문에 객체나 구조체처럼 복잡한 데이터 타입을 전송하려면, 직렬화(Serialization) 과정을 거쳐야한다.
직렬화는 복잡한 데이터를 문자열 형태로 변환하여 네트워크로 전송할 수 있게 해주는 과정이다.

프로그래밍 언어로 JavaScript를 사용하든, Java, Python, C++ 사용하든 전부 직렬화 / 역직렬화 과정을 통해 네트워크를 이용한 데이터 통신을한다. 이 글에서의 모든 예시는 JavaScript로 들겠다.


** 들어가기에 앞서 JSON 제대로 이해하기

JSON이란: 데이터를 객체의 구조로 표현하기 위한 데이터 포맷.
데이터를 직관적으로 표현하기 위해 키-값 쌍으로 구성된 구조체(객체)나 배열 등의 형식을 사용한다.

그렇다면 JSON 형식의 문자열이란: JSON 형식의 문자열이란 JSON 데이터 구조를 문자열로 변환한 것이다.



- 직렬화 과정
JavaScript에서 데이터를 직렬화하고 다시 사용할 수 있도록 역직렬화하는 대표적인 방법으로는 JSON 포맷을 사용하는 것이다.
예시로, Map과 같은 복잡한 구조를 문자열로 변환한 뒤, 이를 서버로 전송하거나 네트워크를 통해 전달할 수 있다.

- Map 객체를 네트워크로 전송하는 방법
1) 직렬화(Serialization): Map 객체는 기본적으로 JSON으로 직렬화 할 수 없으므로, Object.fromEntries() 를 사용하여 Map을 일반 객체로 변환한 후, JSON으로 변환한다.
2) 역직렬화(Desirialization): 받은 문자열을 다시 Map 객체로 복원하려면, JSON 문자열을 파싱한 후 Map 형태로 변환한다.(직렬화의 역순)

1) Map을 네트워크로 전송하기 위해 직렬화하는 예시:
const map = new Map();
const serializedMap = JSON.stringify(Object.fromEntries(map));
// 이제 serializedMap은 네트워크를 통해 전송할 수 있는 문자열이다.

2) 서버로부터 직렬화된 데이터를 수신한 후 역직렬화하는 예시:
const receivedData = '{"key_1":"value_1", "key_2":"value_2"}';
const deserializedObject = JSON.parse(receivedData);
const map = new Map(Object.entries(deserializedObject));
// Map으로 복원되었다.



- 네트워크 통신이 아닌 단순한 함수 호출에서 직렬화가 필요하지 않은 이유
: JavaScript 엔진 내에서 객체를 참조할 수 있기 때문이다.

로컬 함수 호출에서는 데이터가 네트워크를 통해 이동하지 않는다. 즉, 함수가 동일한 메모리 공간에서 실행되고 있기 때문에 직렬화 과정이 필요하지 않다.

직렬화가 필요하지 않은 이유
:
로컬 호출: 함수는 같은 JavaScript 환경 내에서 실행됩니다. 이 경우, 매개변수는  객체의 참조(reference)로 전달되며, 객체의 복사본이 아닌 원본 데이터를 함수에서 참조한다. 
즉, JavaScript의 메모리 상에서 직접 접근할 수 있기 때문에 데이터 전송이 필요 없고, 직렬화 과정 또한 필요 없다.


- 직렬화가 필요한 경우:
1) 네트워크 통신: 
데이터를 네트워크를 통해 다른 컴퓨터나 서버로 전송할 때는 직렬화가 필요하다. 
네트워크는 문자열이나 바이너리 데이터만 전송할 수 있기 때문에, 복잡한 데이터 구조를 JSON이나 바이너리로 변환해야 한다.
2) 로컬 저장소: 
데이터를 로컬 스토리지나 파일에 저장할 때도 직렬화가 필요하다. 저장 장치는 객체의 참조를 이해하지 못하기 때문에 데이터를 문자열로 변환해야 한다.



- 그렇다면, 네트워크를 통해 문자열 또는 바이너리 형태의 데이터만 전달 가능한 이유는?
: 
네트워크는 기본적으로 비트(0과 1)로 데이터를 전송한다. 이 비트들의 집합을 어떻게 해석할 지는 약속된 구격에 따라 결정된다.
따라서, 문자열(텍스트)와 바이너리(2진 데이터)만 네트워크를 통해 전송 가능하다.















