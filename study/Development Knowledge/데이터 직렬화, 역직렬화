데이터 직렬화, 역직렬화


1. 직렬화(Serialization), 역직렬화(De-Serializaion)란

: Serial은 '연속된' 이라는 뜻을 가지고 있다. 즉, Serialization은 객체를 '연속된' Byte나 String으로 변환하는 과정을 의미한다. Object는 메모리에 올라와 있지만 Byte나 String은 파일로 저장될 수 있거나 통신에 사용될 수 있다.

즉, 직렬화는 객체를 파일의 형태 등으로 저장하거나, 통신하기 쉬운 포맷으로 변환하는 과정을 의미한다.

특정 포맷으로 직렬화된 데이터는 역직렬화라는 과정을 통해 다시 객체로 변환될 수 있다.


2. 직렬화가 필요한 이유

1) 데이터 타입 종류

: 어떠한 개발 언어를 선택하든 기본적으로 프로그램이 사용하는 데이터의 메모리 구조는 크게 2가지로 나뉘게 된다.

- 원시 타입 데이터 (Primitive Type): int float, char 등 값 형식 데이터는 Stack 영역에 메모리가 쌓이고 직접 접근이 가능하다.

- 참조 타입 데이터 (Reference Type): 객체와 같은 참조 타입 변수를 선언하면 Heap 영역에 메모리가 할당되고, Stack 영역에서는 이 Heap 메모리를 참조하는 구조로 되어있다.

2) 참조 형식 데이터를 사용할 수 없음

:  예를 들어, Java에서 객체 A를 만들고 해당 객체의 주소 값이 0x00123123이며, 해당 객체를 직렬화 과정 없이 파일에 저장했다고 가정해보자.

이후 프로그램을 종료하고 다시 Java프로그램을 실행하여 해당 파일을 불러와 주소 값 0x00123123을 가져오더라도 기존 A 객체의 데이터는 가져올 수 없다.

프로그램이 종료되면 기존에 할당되었던 메모리(0x00123123)는 해제되고 없어지기 때문이다.

마찬가지로 네트워크 통신 또한 동일한 맥락으로 이해할 수 있다.

3) 직렬화를 통해 참조 타입 데이터를 원시 타입 데이터로 변경

: 디스크에 저장하거나 네트워크 통신할 때, 참조 타입 객체는 객체의 주소 값을 사용하기 때문에 쓸 수 없고, 원시 타입의 데이터만 쓸 수 있다.

따라서, 참조 타입 데이터를 사용하고자 한다면 직렬화를 통해 해당 객체의 주소 값이 가지는 데이터를 전부 원시 타입 데이터로 변환해야 한다.

직렬화가 된 데이터는 언어에 따라 텍스트 또는 바이너리 등의 형태가 되고, 이러한 형태가 되었을 때는 저장 또는 통신할 때 파싱이 가능한 유의미한 데이터가 된다.



3. 데이터 직렬화 방식

: 직렬화의 방식은 크게 2가지가 있다.

1) 텍스트 기반 데이터 직렬화(Text-Based Data Serialization)

: 사람이 읽을 수 있는 형태로, 저장 공간의 효율성이 떨어지고 파싱하는 시간이 오래 소요된다.

데이터의 양이 적을 때 주로 사용하며, 최근에는 JSON 형식으로 데이터 직렬화를 많이 사용한다.

ex. XML, CSV, JSON, YAML 등

2) 바이너리 기반 데이터 직렬화 (Binary Data Serialization)

: 사람이 읽을 수 없는 형태로 저장 공간을 효율적으로 사용하고 파싱이 빠르다.

데이터의 양이 많을 때 주로 사용한다.

ex. 프로토콜 버퍼, Apache Avro, 이미지(JPG, PNG, FIG), 오디오(WAV, MP3, OGG, AAC), 영상(AVI, MP4, MKV) 등








