[JPA와 Hibernate, 그리고 Spring Data JPA]

1. JPA란?
: 자바 ORM(Object Relational Mapping)기술에 대한 API 표준 명세를 의미한다.

JPA는 특정 기능을 하는 라이브러리가 아니고, ORM을 사용하기 위한 인터페이스의 집합체이다.

JPA는 자바 어플리케이션에서 관계형 데이터베이스를 어떻게 사용해야 하는지를 정의하는 방법 중 한 가지이다.

따라서 JPA는 구현이 없다. JPA를 정의한 javax.persistence패키지의 대부분은 interface, enum, Exception, Annotation으로 이루어져있다. (JPA의 핵심이 되는 EntityManager는 javax.persistence 패키지 안에 interface로 정의되어있다.

-> JPA를 이용하기 위해서는 JPA의 구현체인 Hibernate, EclipseLink, DataNucleus와 같은 ORM 프레임워크를 사용해야 한다.


2. Hibernate
: JPA의 구현체 중 하나이다. (마치 자바 interface와 구현 class와 같은 관계)
SQL을 직접 작성하지 않고 보다 직관적인 코드인 메소드를 사용해 데이터를 조작할 수 있다.
Hibernate가 SQL을 직접 사용하지 않는다고 해서 JDBC API를 사용하지 않는 것은 아니다.
Hibernate가 지원하는 메소드 내부에서는 JDBC API가 동작하고 있으며, 단지 개발자가 직접 SQL을 작성하지 않을 뿐이다.

JPA의 핵심인 EntityManagerFactory, EntityManager, EntityTransaction을 Hibernate에서는 
각각 SessionFactory, Session, Transaction으로 상속받고 각각 Impl로 구현하고 있다.

Hibernate의 장단점
장점 - 
1) 생산성: SQL을 직접 작성하지 않고, 메소드 호출만으로 query가 수행된다 -> 반복적인 SQL작업과 CRUD작업을 수행하지 않으므로 생산성이 향상된다.
2) 유지보수: 테이블 컬럼이 변경되었을 경우 Mybatis에서는 관련 DAO의 파라미터, 결과, SQL등을 모두 확인하여 수정해야 하지만 
JPA는 이런 작업을 대신 수행하기 때문에 유지보수 측면에서 우수하다.
3) 객체지향적 개발: 객체지향적으로 데이터를 관리할 수 있기 때문에 비즈니스 로직에 집중할 수 있다.
로직을 쿼리에 집중하기 보다 객체 자체에 집중할 수 있다.
4) 특정 벤더에 종속적이지 않다: 여러 DB 벤더(MySQL, Oracle DB 등) 마다 SQL문법이 다르기 때문에 
어플리케이션 개발 시 처음 선택한 DB를 나중에 바꾸는 것은 매우 복잡하다.
하지만 JPA는 추상화된 데이터 접근 계층을 제공하기 때문에 특정 벤더에 종속적이지 않다. 
(설정 파일에서 JPA에게 어떤 DB를 사용학고 있는지 작성만 해준다면 얼마든지 DB를 변경할 수 있다.)

단점 - 
1) 어렵다: 많은 내용이 추상적으로 감싸져있기 때문에, JPA를 제대로 사용하기 위해서는 알아야 할 내용이 많다.
2) 성능: 메소드 호출로 쿼리를 실행하는 것은 내부적으로 많은 동작이 일어난다는 것을 의미하므로, 직접 SQL을 작성하는 것보다 성능이 떨어질 수 있다.
3) 세밀함이 떨어진다: 메소드 호출로 SQL을 실행하기 때문에 세밀함이 떨어진다. 
또한 객체간의 매핑(Entity Mapping)이 잘못되거나 JPA를 잘못 사용하여 의도하지 않은 동작이 발생할 수 있다.
복잡한 통계 분석 쿼리를 메소드 호출로 처리하는 것은 힘들다. -> 이것을 보완하기 위해 JPA에서는 SQL과 유사한 기술인 JPQL을 지원한다.


3. Spring Data JPA
: Spring Data JPA는 Spring에서 제공하는 모듈 중 하나로, JPA를 쉽고 편하게 사용할 수 있도록 도와준다.
기존 JPA를 사용하려면 EntityManager를 주입받아 사용해야 하지만, Spring Data JPA는 JPA를 한단계 더 추상화시킨 Repository 인터페이스를 제공한다.
Spring Data JPA가 JPA를 추상화 했다는 말은, Spring Data JPA의 Repository의 구현에서 JPA를 사용하고 있다는 것이다.

사용자가 Repository 인터페이스에 정해진 규칙대로 메소드를 입력하면,
Spring이 알아서 해당 메소드 이름에 적합한 쿼리를 수행하는 구현체를 만들어서 Bean으로 등록해준다.


4. Hibernate와 Spring Data JPA의 차이점
: Hibernate는 JPA의 구현체이고, Spring Data JPA는 JPA에 대한 데이터 접근의 추상화라고 말할 수 있다.
Spring Data JPA는 GenericDao라는 커스텀 구현체를 제공하고, 이것의 메소드의 명칭으로 JPA쿼리를 생성할 수 있다.

Spring Data JPA를 사용하면 Hibernate, EclipseLink등의 JPA구현체를 사용할 수 있다.(구현체가 필요하다.)

Hibernate는 낮은 결합도의 이점을 살린 ORM프레임워크로서 API 레퍼런스를 제공한다.



참고 자료: tistory, "[JPA] JPA와 Hibernate 그리고 Spring Data JPA, https://dev-coco.tistory.com/74, 20240328


