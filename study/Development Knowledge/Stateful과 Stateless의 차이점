Stateful / Stateless 차이점



- Stateful(상태유지)
: 상태유지라 함은 클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존함을 의미한다.
클라이언트와 서버 간에 송수신을 하며 단계별 과정을 진행하는데 있어, 서버에서 클라이언트가 이전 단계에서 제공한 값을 저장하고 다음 단계에서도 저장한 상태이다.
대표적으로 홈페이지에서 한 번 로그인을 하면 페이지를 이동해도 로그인이 풀리지 않고 계속 유지되는 것이 바로 서버가 클라이언트의 상태를 유지(기억)하고 있으니까 가능한 것이다.
클라이언트의 정보를 기억한다 라는 말은 어딘가에 정보를 저장하고 통신할 때마다 읽는다는 뜻이다.
이러한 정보들은 일반적으로 브라우저의 쿠키, 또는 서버의 세션 메모리에 저장되어 상태를 유지하게 된다.


- Stateful한 프로토콜
: 대표적인 Stateful 구조를 따르는 프로토콜로 TCP의 3-way handshaking 과정을 예로 들 수 있다.

1) 클라이언트는 서버에 SYN(접속 요청 메세지)를 전송하고 SYN_SENT 상태가 된다.
2) 서버는 SYN 요청을 받고 클라이언트에 요청을 수락하는 SYN/ACK를 전송하고 SYN_RECIEVED 상태가 된다.
3) 클라이언트는 서버에게 수락 확인으로 ACK를 또 보내고, 수신받은 서버는 EXTABLISHED 상태가 된다.
4) 세션 '상태'가 ESTABLISHED가 됨으로써, 서버와 클라이언트는 서로 데이터를 주고 받을 수 있는 상태가 된 것이다.

이렇게 TCP는 세션 '상태'에 따라 서버의 응답이 달라지게 되는 Stateful 하다고 말할 수 있다.


- Stateful 문제점
: 위에서 상태를 유지한다 함은 서버에서 클라이언트의 상태 정보를 저장하고 있는 것이다.
Stateful의 문제점은 해당 서버가 멈추거나 여러 이유로 해당 서버가 못쓰게 되어 다른 서버를 사용해야 할 때 발생한다.
왜냐하면 새로운 서버에서는 이전 서버에서 가지고 있던 상태값들을 가지고 있지 않기 때문이다.
(만약, 기존서버에서 새로운서버로 이전 데이터를 모두 전달해준다면 문제가 없을 수 있다)


- Stateless (무상태)
: Stateless는 반대로 클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존하지 않음을 의미한다.
Stateless 구조에서 서버는 단순히 요청이 오면 응답을 보내는 역할만 수행하며, 상태 관리는 전적으로 클라이언트에게 책임이 있다.
즉, 클라이언트는 서버간의 통신에 필요한 모든 상태 정보들을 가지고있다가 서버와 통신할 때 데이터를 실어 보내는 것이 Stateless 구조이다.
서버는 단순히 제공된 정보로 응답만 하기 때문에 상태 유지에 대한 부하가 현저히 줄어들게 되며, 앞서 언급한 Stateful의 단점을 상쇄한다.


- Stateless한 프로토콜
: 대표적인 Stateless 프로토콜로는 UDP와 HTTP가 있다.
(HTTP 통신 기본이 무상태)
무상태에서 브라우저는 데이터를 전송할 때마다 연결하고 바로 끊어버리게 된다.
UDP를 예로 들자면, TCP와 달리 handshaking 과정을 통해 연결 세션을 인증하는 절차를 수행하지 않는다. (세션 상태와 관계없이 무조건 전송)
따라서 서버는 서버가 응답한 데이터를 클라이언트가 수신했는지 확인하지 않으며 클라이언트와의 세션 상태에 관계없이 요청에 대한 응답만을 수행한다.


- Stateless 문제점
: 무상태의 단점으로는 클라이언트가 요청하는 시점에 상대적으로 Stateful보다 더 많은 데이터가 소모된다는 점이다.
클라이언트는 요청할 때 마다 자신의 부가정보를 담아야한다.
예를 들어 로그인을 수행한 유저가 로그인 된 상태를 유지해야 하는 서비스는 상태를 유지하지 않으면 로그인이 풀리기 때문에, 클라이언트는 매 요청 시 로그인 된 자신의 정보를 서버에 보내야한다.
따라서 모든것을 Stateless하게 설계할 수 없다. 웬만하면 Stateless를 지향하며, 필요한 경우에 Stateful을 최소한으로 사용하는 것이 가장 효율적이다.


- Stateless와 토큰(Token)
: Stateless 특징을 유지하면서도 로그인 상태 유지를 가능하게 하는 기술 중 하나가 바로 JWT 토큰이다.
토큰은 클라이언트가 암호화된 로그인 정보들을 지니고 있다가 서버에 통신할 때 넘겨줌으로써 로그인 된 사용자임을 인증하는 방식이다.


- Stateless와 HTTP/REST
: HTTP는 프로토콜이며, REST는 구조(Architecture)에 가깝다.
즉, REST는 HTTP 프로토콜 상에 구현된 Resource Oriented Architecture (ROA) 설계 구조이다.
따라서 HTTP와 REST 모두 Stateless한 성격을 가진 녀석들로,
1) HTTP는 Stateless한 성격을 가진 '프로토콜',
2) REST는 Stateless한 성격을 가진 '설계 구조'
이다.






참고: https://inpa.tistory.com/entry/WEB-📚-Stateful-Stateless-정리 [Inpa Dev 👨‍💻:티스토리]










