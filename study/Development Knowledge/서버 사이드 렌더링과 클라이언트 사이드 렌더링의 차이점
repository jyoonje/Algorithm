서버 사이드 렌더링과 클라이언트 사이드 렌더링은 웹 페이즈를 생성하고 제공하는 방식에 있어 핵심적인 차이를 가지며,
이러한 차이는 웹 개발의 여러 측면에 영향을 미친다.


1. 서버 사이드 렌더링(SSR)
정의: SSR은 웹 페이지의 렌더링을 서버에서 수행하는 방식이다.
사용자가 웹 사이트에 접근하면, 서버는 해당 요청에 맞는 완성된 HTML 페이지를 생성하여 사용자의 브라우저로 전송한다.

장점: 
1) 초기 로딩 속도: 서버에서 완성된 페이지를 전송하기 때문에 첫 페이지 로딩 속도가 빠르다.
2) 검색 엔진 최적화(SEO): 검색 엔진 크롤러가 완성된 HTML페이지를 쉽게 분석할 수 있어 SEO에 유리하다.

단점:
1) 서버 부하: 각 페이지 요청마다 서버에서 HTML을 생성해야 하므로 서버 부하가 증가할 수 있다.
2) 유연성 제한: 페이지의 일부만을 업데이트하는 것이 더 어려워, 사용자 인터랙션이 많은 동적 애플리케이션에서는 제한적일 수 있다.


2. 클라이언트 사이드 렌더링(CSR)
정의: CSR은 웹 페이지의 렌더링을 사용자의 브라우저(클라이언트)에서 수행하는 방식이다.
서버는 HTML템플릿과 JavaScript를 전송하고, JavaScript가 브라우저에서 실행되면서 페이지를 동적으로 생성한다.

장점:
1) 동적 인터랙션: 페이지의 일부만 변경할 수 있어, 사용자 인터랙션이 많은 애플리케이션에 적합하다.
2) 서버 부하 감소: 한 번의 로딩으로 필요한 모든 자원을 불러온 후,
                  사용자의 행동에 따라 클라이언트 측에서 페이지를 업데이트하기 때문에 서버 부하가 감소한다.

단점:
1) 초기 로딩 지연: 처음에 필요한 모든 자원을 한 번에 불러와야 하므로 초기 로딩 시간이 길어질 수 있다.
2) SEO문제: 검색 엔진이 JavaScript를 실행하지 않고 HTML만을 분석하는 경우,
            동적으로 생성된 내용을 크롤링하지 못해 SEO에 불리할 수 있다.


3. 웹 개발에 미치는 영향
- 성능과 사용자 경험: SSR은 초기 로딩 속도와 SEO에 유리하지만, 
                    CSR은 사용자 인터랙션과 웹 애플리케이션의 동적인 기능 구현에 강점을 가진다.
- 개발 복잡성: CSR을 사용하는 SPA(Single Page Application)개발은 초기 설정이 복잡할 수 있지만,
              한 번 구축하면 사용자 인터랙션을 풍부하게 제공할 수 있다.
              반면, SSR은 전통적인 웹 개발 방식에 더 가깝지만, 동적 요소를 처리하기 위해 추가적인 기술이 필요할 수 있다.

















