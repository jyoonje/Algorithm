도커(Docker)란 무엇인가


1. 도커의 탄생 배경
기존, 로컬에서 개발해 실 서버에 올릴 때 소스파일만 올리는 것으로는 문제가 있었다.
js로 예를 들자면, js 소스 파일을 구동하기 위해서는 npm, node.js, 각종 Dependencies등을 설정 해줘야 한다.
개발자의 pc마다, 서버마다 이 모든것을 설치하는 것은 번거로울 뿐만아니라 오류의 발생 원인이 되곤한다.

예시로 내 서버에 jdk가 있고, 서버에도 jdk가 있으니 내 서버에서 개발안 java 소스 파일을 서버에 배포하면 동작이 되겠지? 
-> 동작 실패. jdk의 버전이 맞지 않기 때문

이러한 문제점을 해결하기 위해 도커가 탄생했다.


2. 도커란 무엇인가?
컨테이너라고 불리는 하나의 작은 소프트웨어 유닛 안에
우리의 어플리케이션과 그에 필요한 시스템 툴, 환경설정, 모든 디펜던시를 하나에 묶어서
다른 서버, 다른 PC 그 어떤 곳에서도 쉽게 배포하고 안정적으로 구동할 수 있게 도와주는 툴이다.
어플리케이션과 어플리케이션이 구동하는데 필요한 모든 것들을 도커 컨테이너에 담아 저장한 후,
어플리케이션을 구동하고싶은 서버에 도커 컨테이너를 다운받는다면 어떤 PC에서도 동일하게 구동할 수 있다.


3. 컨테이너를 만드는 방법
컨테이너를 사용하기 위해서는 총 세가지가 필요하다.
도커파일, 이미지, 컨테이너
도커파일을 만들고 -> 이미지를 생성하고 -> 만들어진 이미지를 컨테이너로 구동.

- 도커파일: 컨테이너를 어떻게 만들어야 하는지에 대한 설명서. 다음 내용들을 포함하고있다.
1) 어플리케이션을 구동하기 위한 파일은 어떤것이 있는가
2) 어떤 dependencies를 다운받아야 하는가
3) 필요한 환경 변수
4) 어떻게 구동해야하는지에 관한 script

- 이미지: 어플리케이션을 실행하는데 필요한 코드, 런타임 환경, 시스템 툴, 시스템 라이브러리 등이 포함

- 컨테이너: 이미지를 고립된 환경에서 개별적인 시스템 안에서 실행할 수 있는 공간



4. 컨테이너를 배포하는 방법
1) 사용자는 Local에 Docker를 설치한 후 Dockerfile을 만든다.
2) Dockerfile을 build 시켜 Image로 만든다.
3) 만든 Image를 Container Registry에 Push
4) 실서버에 Docker를 설치 한 후 Container Registry에서 Image를 Pull 한다.
5) Docker에서 Image를 run 한다.




