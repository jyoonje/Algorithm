클린 아키텍처


- 아키텍처?
: 어떤 대상의 구성과 동작 원리,
 구성 요소간의 관계 및 시스템 외부 환경과의 관계를 설명하는 하나의 설명서


- 소프트웨어 아키텍처
: 소프트웨어 구성요소들 사이 관계를 표헌
 소프트웨어가 제공하는 가치인 기능과 구조 중 구조에 해당한다.
 소프트웨어의 동작을 위해서는 기능이 더 중요하다고 단순히 생각할 수 있지만, 
 기능을 보완/추가할 때 구조또한 기능만큼 중요하다.


- 왜 구조가 중요할까
: 소프트웨어 비용과 관련되어있다.  
개발 초기 단계에는 많은 기능을 추가하기 떄문에 개발비용이 더 들지만, 개발이 완료된 후에는 계속해서 변화하는 소프트웨어를 유지보수해야한다. 이 때 부터, 기능 개발 비용보다 유지보수의 비용이 훨씬 크다.


- 좋은 구조를 만드는 방법: 아키텍처 패턴
1. 레이어드 아키텍처: 관심사가 같은 코드들을 계층으로 그룹화
레이어드 아키텍처의 특징: 
1) 계층화로 인해 분리된 책임
2) 편의에 따라 여러 계층을 추가 가능하다
3) 구조가 쉽고 단순하고 익숙하다
4) 데이터베이스 주도 설계가 될 수 있다. 

레이어드 아키텍처의 흐름:
 클라이언트 요청 -> Presentaiotn Layer에서 처리 요청 -> Application Layer에서 데이터 요청 -> Persistence Layer 응답 -> Application Layer 응답 -> Presentation Layer 응답 -> 클라이언트 수신

레이어드 아키텍처는 상위 레이어가 하위 레이어를 알 수 있다. 이는 상위 레이어의 변경이 생길 경우, 하위 계층에서 영향을 받는다. -> 관심사를 분리하고자 계층을 만든 것인데, 한 계층에 영향을 받는 것이다.


2. 클린 아키텍처: 의존성 역전을 통해 도메인이 중심
클린 아키텍처의 특징:
1) 핵심 규칙을 담고 있는 도메인이 중심
2) 도메인이 세부 사항에 의존하지 않음
(세부 사항: IO장치, DB, 프레임워크, 통신 프로토콜 등 코드를 제외한 모든 부분)
3) 익숙하지 않을 수 있고, 레퍼런스가 적다




















