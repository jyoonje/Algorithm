

### 차이점 - 1. Docker와 Podman 동작 방식의 차이

Docker와 Podman은 매우 유사한 것 같지만, Docker와 Podman은 엄연히 크게 다른 부분이 존재한다.


![스크린샷 2024-10-31 144653](https://github.com/user-attachments/assets/88992346-1201-41b1-89ae-4e3383a9bedc)


Docker는 애플리케이션을 빌드하고 컨테이너화 하기 위한 **Docker Engine**, 
컨테이너 이미지를 배포하고 제공하기 위한 **Docker Registry**,
여러개의 컨테이너 애플리케이션을 정의하고 실행하기 위한 **Docker Compose**,
사용자의 로컬 컴퓨터나 클라우드 인스턴스에 도커 호스트를 구성해주는 **Docker Machine**, 컨테이너 클러스터링 및 스케줄링을 위한 **Docker Swarm**으로 구성된다.


Docker Engine에는 컨테이너 이미지를 관리하고, 컨테이너 이미지를 이용해 컨테이너를 실행하기 위한 Docker daemon이 있다.
Podman 역시 컨테이너를 실행하기 위한 컨테이너 이미지, 그리고 이미지를 통해 실행된 컨테이너와 이를 관리하기 위한 커맨드 기반의 유틸리티가 있다.


![스크린샷 2024-10-31 144750](https://github.com/user-attachments/assets/3479209b-05c7-40f6-bf5f-5c6b1b53f975)


Docker는 **컨테이너 레지스트리**로부터 이미지를 받아와 Docker 내부의 **이미지 저장소에 저장**한다.
그리고 이미지 저장소에 저장된 이미지를 활용하여 컨테이너를 실행할 수 있으며, 실행 중인 컨테이너를 이미지로 빌드할 수도 있다.

Docker는 이런 다양한 작업들이 Docker daemon 위에서 이루어진다.
데몬을 통해 모든 서비스를 동작하는 방식은 분명 효율적이지만, 도커 데몬이 죽거나 재시작되면 모든 컨테이너가 중지된다는 문제가 발생한다.


![image](https://github.com/user-attachments/assets/2c25c238-e077-405d-a561-0d99b4dc7c04)


반면, Podman은 daemon 없이 커맨드로 컨테이너 레지스트리로부터 이미지를 받아와 Podman 호스트의 로컬 이미지 저장소에 이미지를 저장하고, 해당 이미지를 이용하여 컨테이너를 실행한다.
이 때 **Podman 라이브러리를 통해 바로 컨테이너를 실행하기 때문에 컨테이너 간 서로 영향을 주지 않으며, 컨테이너와 이미지 사이, 커맨드 명령어로 컨테이너를 제어하거나 이미지를 관리할 때도 서로 영향을 주지 않는다.** 즉, 데몬이 필요하지 않고 컨테이너를 더 안정적으로 실행할 수 있다는 것이다.

---

### 차이점 - 2. root 권한

도커는 도커 데몬에 모든 권한이 집중되어 아무나 docker client로 도커 데몬을 제어하지 못하도록 root 사용자만 도커 클라이언트를 사용해야한다. 
일반 사용자가 도커 클라이언트를 실행하면 권한 부족 문제 텍스트가 출력되는 것을 알 수 있다.

root 권한이 필요한 도커의 방식은 최고 관리자인 시스템 운영자가 컨테이너도 관리해야 하므로 업무 분리가 제대로 이루어지지 않고 과다한 root 권한이 필요해 **보안에 취약하다는 단점**이 있다.

**Podman은 fork/exec으로 개별 컨테이너를 실행**하기 때문에 1024의 Well known 포트를 사용하는 등 root 권한이 반드시 선행되어야 하는 작업만 아니라면 일반 사용자로 실행이 가능하다.

따라서, 시스템 운영자와 컨테이너 운영자로의 업무 분담이 수월하다.

---

### 차이점 - 3.  Kubernetes 지원

-생략
