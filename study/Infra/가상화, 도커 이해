- 가상화
컴퓨터 시스템은 하드웨어와 소프트웨어로 나뉘며, 하드웨어는 필수적인 컴퓨팅 자원을 제공하고, 소프트웨어는 이 자원을 활용해 다양한 작업을 수행한다. 
소프트웨어는 크게 시스템 소프트웨어(예: 운영체제)와 애플리케이션 소프트웨어로 구분된다.

운영체제는 각 프로세스에 독립적인 메모리 공간을 제공하는 가상 메모리 시스템을 구현한다. 
가상 메모리는 하드 디스크의 저장 공간과 RAM을 결합해 관리함으로써, 각 프로세스가 자신만의 메모리를 가진 것처럼 동작하게 한다. 
이러한 메커니즘은 멀티태스킹을 가능하게 하며, 시스템의 효율성과 안정성을 높인다.

가상화 기술을 사용하면 단일 물리적 컴퓨터 상에 다수의 가상 머신을 구축할 수 있다. 
각 가상 머신은 독립된 운영 체제, 애플리케이션, 네트워크 리소스를 갖추고, 물리적 하드웨어 자원을 가상화된 형태로 공유한다.
예를 들어, VMware와 같은 가상화 플랫폼을 사용하면, 사용자는 윈도우 운영체제 내에서 리눅스 운영체제를 실행할 수 있다. 
이러한 가상 머신은 물리적 하드웨어의 제한을 넘어서며, 다양한 운영 체제와 애플리케이션을 동시에 호스팅할 수 있다.

가상 네트워크 인터페이스는 가상 머신이 인터넷과 통신할 수 있게 하며, 가상 스위치와 같은 네트워크 가상화 기술은 가상 머신들이 서로 통신할 수 있게 도와준다. 이 모든 구성 요소는 가상화 환경을 통해 효율적으로 관리되며, 물리적 자원의 최적화된 활용을 가능하게 한다.

- 도커
도커는 가상화 기술과는 다르게 컨테이너화 기술을 사용한다.
도커 컨테이너는 호스트 OS의 커널을 공유하면서 각 컨테이너에 필요한 애플리케이션과 그 의존성만을 포함한다.
이 구조는 각 컨테이너가 운영체제의 전체 인스턴스를 필요로 하지 않기 때문에, 가상 머신에 비해 훨씬 가볍고 빠르다.

도커는 개별 컨테이너를 격리된 환경에서 실행할 수 있게 하며, 이는 각 컨테이너가 마치 독립된 서버처럼 동작하게 한다. 
도커 엔진은 컨테이너의 실행을 관리하며, 네트워크 설정, 스토리지 할당 등의 작업을 담당한다. 
도커를 사용함으로써, 개발자는 소프트웨어를 더 빠르고 일관되게 배포할 수 있으며, 다양한 환경에서의 호환성 문제를 최소화할 수 있다.

도커 컨테이너는 소스코드, 라이브러리, 바이너리 파일들을 하나의 패키지로 묶어 관리한다. 
이는 개발, 테스트, 프로덕션 환경에서의 일관된 동작을 보장하며, 다른 개발자와의 협업을 간소화한다. 
호스트 OS와의 통신은 도커 엔진이 중재하며, 이는 컨테이너가 필요로 하는 모든 시스템 리소스를 효율적으로 할당받도록 한다.

결론적으로, 도커는 전통적인 가상화 기술에 비해 리소스 사용을 최적화하고, 애플리케이션 배포를 빠르고 효율적으로 만든다. 
이러한 특성은 클라우드 환경에서의 대규모 애플리케이션 관리와 배포에 특히 유리하다.

