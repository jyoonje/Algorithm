소켓(Socket)

OSI 7계층 중 응용 계층에 속하는 프로세스들은 데이터 송수신을 위해 반드시 소켓을 거쳐 전송 계층으로 데이터를 전달해야한다. 
즉, 소켓은 전송 계층과 응용 프로그램 사이의 인터페이스 역할을 하며 떨어져 있는 두 호스트를 연결해준다.
소켓은 IP 주소와 포트 번호를 사용하여 다른 프로세스와 데이터를 송수신 할 수 있다.
소켓은 주로 TCP/IP 프로토콜을 사용하여 안정적인 데이터 전송을 보장하지만, UDP를 사용한 비연결형 통신도 가능하다.

소켓의 주요 기능: 
1) 연결 성정: 클라이언트와 서버 간의 연결을 설정한다.
2) 데이터 송수신: 설정된 연결을 통해 데이터를 주고받는다.
3) 연결 종료: 통신이 끝난 후 연결을 종료한다.

소켓 통신 과정:
-서버
1. 서버가 소켓을 생성
2. 바인딩(ip, port 번호 설정)
3. listen() 으로 클라이언트 요청에 대기열을 만들어 몇 개의 클라이언트를 대기시킬지 결정
4. accept()로 클라이언트와 연결
5. 데이터 송수신
6. 소켓 닫기

-클라이언트
1. 소켓 생성
2. 서버에 설정된 ip, port로 연결 시도
3. accept()로 클라이언트의 socket descrptor 반환
4. 데이터 송수신
5. 소켓 닫기


웹소켓(WebSocket)

웹 버전의 TCP또는 소켓,
웹소켓 프로토콜은 접속 확립에 HTTP를 사용하지만, 그 후 통신은 웹소켓 독자의 프로토콜로 이루어진다.



HTTP 통신과 소켓 통신의 차이

1) HTTP 통신
 - 클라이언트의 요청이 있을 때만 서버가 응답
 - JSON, HTML, Image등 다양한 데이터를 주고받을 수 있음
 - 서버가 응답한 후 연결을 바로 종료하는 단방향 통신
 - 실시간 연결이 아닌 데이터 전달이 필요한 경우에만 요청을 보내는 상황에 유리

2) 소켓 통신
 - 클라이언트와 서버가 특정 포트를 통해 양방향 통신을 하는 방식
 - 데이터 전달 후 연결이 끊어지는 것이 아니라 계속해서 연결을 유지 
	-> HTTP에 비해 더 많은 리소스 소모
 - 클라이언트와 서버가 실시간으로 계속해서 데이터를 주고받아야 하는 상황에 유리
 - 실시간 동영상 스트리밍이나 온라인 게임 등에 사용








