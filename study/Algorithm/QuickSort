package Algorithm;

public class QuickSort {

	public static void main(String[] args) {
		int[] arr = { 7, 4, 2, 8, 3, 5, 1, 6, 10, 9 };
		quickSort(arr, 0, arr.length - 1); // 배열, 시작인덱스, 마지막 인덱스

		for (int i = 0; i < arr.length; i++) {
			System.out.println(arr[i] + ",");
		}
	}

	private static void quickSort(int[] arr, int start, int end) {
		int part = partition(arr, start, end);
		if (start < part - 1)
			quickSort(arr, start, part - 1);
		if (end > part)
			quickSort(arr, part, end);
	}

	private static int partition(int[] arr, int start, int end) {
		int pivot = arr[(start + end) / 2]; // 가운데 인덱스의 값을 피벗값으로 설정

		while (start <= end) {
			while (arr[start] < pivot) {
				start++;
			}
			while (arr[end] > pivot) {
				end--;
			}
			swap(arr, start, end);
			start++;
			end--; // swap 후 포인터가 만날 때 까지 다시 좁힘
		}
		return start;
	}

	private static void swap(int[] arr, int start, int end) {
		int tmp = arr[start];
		arr[start] = arr[end];
		arr[end] = tmp;
		return;
	}

}
