빌더 패턴(Builder Pattern)

1. 정의

객체를 정의하고 생성할 때 보통 생성자를 통해 생성하는 것을 생각한다.
Member member= new Member("정윤제", "27")

하지만 생성자를 통해 객체를 생성하는데에는 몇 가지 단점이 있어 객체를 생성하는 별도의 builder를 두는 방법이 있다. 이를 빌더 패턴이라고 한다.
Member member = Member.builder()
				     .name("정윤제")
				     .age(27)
				     .build();

객체를 생성할 수 있는 빌더를 builder() 메소드를 통해 얻고, 거기에 세팅하고자 하는 값을 세팅한 후, 마지막에 build()메소드를 통해 빌더를 동작시켜 객체를 생성한다.


2. 빌더를 사용해야 하는 이유

1) 생성자 파라미터가 많을 경우 가독성이 떨어진다. 하지만 이를 빌더 패턴으로 구현한다면 각 값들은 빌더의 각 값들이 메소드의 이름으로 구성되어 무슨 값을 의미하는지 파악하기 쉽다. -> 가독성이 좋아진다.

2) 어떤 값을 먼저 설정하든 상관없다.
: 생성자의 경우 정해진 매개변수 순서를 맞춰 값을 넣어줘야한다.
하지만 빌더 패턴은 필드 이름으로 값을 설정하기 때문에 순서에 종속적이지 않다.
Member member= Member.builder()
				    .age(27)
				    .name("정윤제")
				    .build();


3. @Builder 어노테이션
위와 같은 이유르 생성자 대신 빌더를 사용하곤 하는데, 그렇다면 빌더를 구현하는 방법은?
우선 코드로 빌더를 만든 후 그 안에서 멤버 필드별로 값을 설정하고 빌더를 반환하는 메소드를 만들면 된다.
하지만 이 방법은 필드 별로 함수를 생성해야하는 등 생성자보다 훨씬 번거롭고 큰 범위를 차지하기 때문에 코드를 읽는데 불편함 또한 있다.

하지만 우리는 롬복의 @Builder 어노테이션이 있다.
@Builder 어노테이션의 javadoc를 보면 그 긴 과정을 구현해줬다. 따라서 우리는 빌더 패턴을 적용할 객체에 @Builder 어노테이션만 달아주면 된다.
