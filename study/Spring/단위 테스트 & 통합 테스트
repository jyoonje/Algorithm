단위 테스트 & 통합 테스트


: 단위 테스트는 하나의 모듈을 기준으로 독립적으로 진행되는 가장 작은 단위의 테스트이다.
하나의 모듈이란 각 계층에서의 하나의 기능 또는 메소드로 이해할 수 있다.
하나의 기능이 올바르게 동작하는지를 독립적으로 테스트하는 것이다.


- 단위 테스트의 필요성
1) 일반적이로 테스트 코드를 작성한다고 하면 대개 단위 테스트를 의미한다.
2) 통합 테스트는 실제 여러 컴포넌트들 간의 상호작용을 테스트 하기 때문에 모든 컴포넌트가 구동된 상태에서 테스트를 하게 되므로, 캐시나 DB등 다른 컴포넌트들과 실제 연결을 해야하고 어플리케이션을 구성하는 컴포넌트들이 많아질수록 테스트를 위한 시간이 커진다.
3) 단위 테스트는 테스트하고자 하는 부분만 독립적으로 테스트하기 때문에 해당 단위를 유지 보수 또는 리팩토링 하더라도 빠르게 문제 여부를 확인할 수 있다.


- 단위 테스트의 한계
일반적으로 어플리케이션은 하나의 기능을 처리하기 위해 다른 객체들과 데이터를 주고 받는 복잡한 통신이 일어난다. 
단위 테스트는 해당 기능에 대한 독립적인 테스트이기 때문에 다른 객체와 데이터를 주고 받는 경우에 문제가 발생한다.
그래서, 이 문제를 해결하기 위해 테스트하고자 하는 기능과 연관된 모듈에서 가짜 데이터, 정해진 반환 값이 필요하다.
즉 단위 테스트에서는 테스트 하고자 하는 기능과 연관된 다른 모듈은 연결이 단절되어야 비로소 독립적인 단위 테스트가 가능해진다.


- 단위 테스트의 특징
좋은 테스트 코드란, 계속해서 변하는 요구사항에 맞춰 변경되는 코드는 버그의 가능성을 항상 내포하고있으며, 이를 테스트 코드로 검증함으로써 해결할 수 있어야 한다.
실제 코드가 변경되면 테스트 코드의 변경 또한 필요할 수 있으며, 테스트 코드 역시 가독성있게 작성하여 일관된 규칙과 일관된 목적으로 작성해야한다.


FIRST 규칙: 
- Fast: 테스트는 빠르게 동작해야하며, 자주 가동해야한다
- Independent: 각각의 테스트는 독립적이어야하며, 서로에 대한 의존성은 없어야한다.
- Repeatable: 어느 환경에서도 반복이 가능해야한다.
- Self-Validating: 테스트는 성공 또는 실패 값으로 결과를 내어 자체적으로 검증 되어야 한다.
- Timely: 테스트는 테스트 하려는 실제 코드를 구현하기 직전에 구현해야한다.


- 통합 테스트
모듈을 통합하는 과정에서 모듈 간 호환성을 확인하기 위한 테스트이다.
다른 객체들과 데이터를 주고받으며 복잡한 기능이 수행될 때, 연관된 객체들과 올바르게 동작하는지 검증하고자 하는 테스트이다.
독립적인 기능보다 전체적인 연관 기능과 웹 페이지로부터 API를 호출하여 올바르게 동작하는지 확인한다.


- 테스트 코드 작성 공통 준수 사항
Given / When / Then 패턴
Given: 어떠한 데이터가 주어질 때,
When: 어떠한 기능을 실행하면,
Then: 어떠한 결과를 기대한다.


Mockito를 이용한 단위 테스트
모키토는 개발자가 동작을 직접적으로 제어할 수 있는 가짜 객체를 지원하는 테스트 프레임워크이다.
스프링 어플리케이션은 여러 객체들간의 의존성이 생기는데, 이러한 의존성을 모키토를 이용하여 단절시킴으로 단위 테스트의 작성을 돕는다.
