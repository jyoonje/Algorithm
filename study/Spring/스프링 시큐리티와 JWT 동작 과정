Spring Security와 JWT의 구조, 동작 과정


- JWT ( Json Web Token )

기존의 인증 체계는 Cookie, Session으로 이루어져 있다.

쿠키는 노출될 때, 민감 정보가 전부 노출되어 보안상 좋지 않고,
쿠키 조작의 가능성, 다른 브라우저간 공유 불가능, 적은 사이즈로 충분한 데이터를 담을 수 없기 때문에 인증에 사용하지 않는다.

세션은 저장소에 문제가 발생하면 인증 체계가 무너지고, 이전에 다른 인증된 유저 또한 인증이 불가능해진다는 점, stateful하기 때문에 http의 장점을 발휘하지 못함, 사용자가 많아지면 메모리를 많이 차지하는 단점이 있다.

JWT는 Json 객체를 통해 안전하게 정보를 전송할 수 있는 웹표준이다. 
JWT는 '.'을 구분자로 세 부분으로 구분되어 있는 문자열로 이루어져 있다. ( aaaaaa.bbbbbb.cccccc ) ( 헤더(header).내용(payload).서명(signature) ) 각각 헤더는 토큰 타입과 해싱 알고리즘을 저장하고, 내용은 실제 전달할 정보, 서명에는 위변조를 방지하기 위한 값이 들어가게 된다.

API 서버는 로그인 요청이 완료되면 클라이언트에게 회원을 구분할 수 있는 정보를 담은 JWT를 생성하여 전달한다.
그러면 클라이언트는 해당 JWT를 헤더에 담아 요청하게 된다.
권한이 필요한 요청이 있을 때마다 API 서버는 헤더에 담긴 JWT값을 통해 권한이 있는 사용자인지 확인하고 리소스를 제공하게 된다.

이렇게 기존의 세션-쿠키 기반의 로그인이 아니라 JWT같은 토큰 기반의 로그인을 하게되면 세션이 유지되지 않는 다중 서버 환경에서도 로그인을 유지할 수 있게되고, 한 번의 로그인으로 유저 정보를 공유하는 여러 도메인에서 사용할 수 있다는 장점이 있다.

이 때 회원을 구분할 수 있는 정보가 담기는 곳이 바로 JWT의 내용(payload) 부분이고 이곳에 담기는 정보의 한 '조각'을 Claim이라고 한다. Claim은 name / value 한 쌍으로 이루어져 있으며, 여러개의 Claim을 넣을 수 있다.

인증: 해당 사용자가 본인이 맞는지 확인
인가: 인증된 사용자가 요청한 자원에 접근 가능한지 확인
Principal(접근 주체): 보호받는 resource에 접근하는 대상
Credential(비밀번호): resource에 접근하는 대상의 비밀번호

인증 -> 인증 성공 후 -> 인가

인증과 인가를 위해 principal을 아이디로, credential을 비밀번호로 사용한다.


- Spring Security란?
: 스프링에서 제공하는 모듈 중 하나로, 스프링을 기반으로 하는 보안 프레임워크이다. Spring Security를 통해 자체적으로 세션 체크, 리다이렉션 등을 추상화하여 보다 편하게 구현하도록 돕는다.

Spring Security는 스프링 의존성을 없애기 위해 Filter 인터페이스를 기반으로 동작한다.
즉, 기존의 Spring MVC, 비즈니스 로직과 완벽하게 분리하여 관리 및 동작할 수 있다.
또, 개발자가 직접 만들어야 할 필터들을 기본적으로 제공한다. 이렇게 제공하는 필터들을 SecurityFilterChain이라 한다.


 ( 필터(Filter)와 인터셉터(Interceptor)의 차이
    - 필터: Dispatcher Servlet 이전에 호출되며, Spring프레임워크에 의존적이지 않다. 
웹 애플리케이션에 전역적으로 처리해야 하는 기능을 처리하는데 용이하다.

 - 인터셉터: 스프링MVC에서 제공하는 기능이다. Dispatcher Servlet과 컨트롤러에 사이에 실행된다.
클라이언트에 들어오는 디테일한 처리에 용이하다.


- 스프링 시큐리티의 구조

1. AuthenticationFilter에서 HTTP요청을 받는다.

2. 해당 부분에서는 요청으로부터 username, password를 가지고 와서 UsernamePasswordAuthenticationToken을 생성한다.

3. 생성된 UsernamePasswordAuthenticationToken을 가지고 AuthenticationManager(인터페이스, 구현체인 providerManager)에게 인증을 진행하도록 위임한다.

4. AuthenticationProvider 가 실질적인 인증과정을 거쳐서 인증에 성공하면 요청에 대해 ProviderManager가 인증 되었다고 알려준다.

5. AuthenticationProvider에서는 받은 UsernamePasswordAuthenticationToken을 UserDetailsService에 사용자 정보를 넘겨준다. (UserDeatailsService는 실제 DB에서 사용자 인증 정보를 가져온다.)

6. 넘겨받은 사용자 정보를 통해 UserDetails 객체를 생성한다.

7. AuthenticationProvider는 UserDetails를 넘겨받고 사용자 정보를 비교한다.

8. 인증이 완료되면 사용자 정보를 담은 Authentication 객체를 반환한다.

9. 처음 요청받은 AuthenticationFilter에 Authentication객체가 반환된다.

10. Authentication 객체를 SecurityContext에 저장한다.


- 스프링시큐리티 + JWT 동작 과정

1. 클라이언트에서 ID / PW 로그인 요청을 한다.

2. 서버 DB에 요청받은 ID/PW가 있다면, Access Token과 Refresh Token을 발급해준다.

3. 이후 클라이언트에서는 요청을 할 때 Access Token을 헤더에 담아 서버가 허용한 API를 사용할 수 있다.

보통 Access Token을 짧게 설정(보안 문제)하고 Refresh Token은 길게 설정한다. Refresh Token을 이용해 만료된 Access Token을 재발급 할 수 있다.
만약 Refresh Token이 유출 될 시, 서버에서는 두 토큰 모두 폐기해야한다. 
