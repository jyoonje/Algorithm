Spring Security와 JWT의 구조, 동작 과정

인증: 해당 사용자가 본인이 맞는지 확인
인가: 인증된 사용자가 요청한 자원에 접근 가능한지 확인
Principal(접근 주체): 보호받는 resource에 접근하는 대상
Credential(비밀번호): resource에 접근하는 대상의 비밀번호

인증 -> 인증 성공 후 -> 인가

인증과 인가를 위해 principal을 아이디로, credential을 비밀번호로 사용한다.


- 스프링 시큐리티의 구조

1. AuthenticationFilter에서 HTTP요청을 받는다.

2. 해당 부분에서는 요청으로부터 username, password를 가지고 와서 UsernamePasswordAuthenticationToken을 생성한다.

3. 생성된 UsernamePasswordAuthenticationToken을 가지고 AuthenticationManager(인터페이스, 구현체인 providerManager)에게 인증을 진행하도록 위임한다.

4. AuthenticationProvider 가 실질적인 인증과정을 거쳐서 인증에 성공하면 요청에 대해 ProviderManager가 인증 되었다고 알려준다.

5. AuthenticationProvider에서는 받은 UsernamePasswordAuthenticationToken을 UserDetailsService에 사용자 정보를 넘겨준다. (UserDeatailsService는 실제 DB에서 사용자 인증 정보를 가져온다.)

6. 넘겨받은 사용자 정보를 통해 UserDetails 객체를 생성한다.

7. AuthenticationProvider는 UserDetails를 넘겨받고 사용자 정보를 비교한다.

8. 인증이 완료되면 사용자 정보를 담은 Authentication 객체를 반환한다.

9. 처음 요청받은 AuthenticationFilter에 Authentication객체가 반환된다.

10. Authentication 객체를 SecurityContext에 저장한다.


- 스프링시큐리티 + JWT 동작 과정

1. 클라이언트에서 ID / PW 로그인 요청을 한다.

2. 서버 DB에 요청받은 ID/PW가 있다면, Access Token과 Refresh Token을 발급해준다.

3. 이후 클라이언트에서는 요청을 할 때 Access Token을 헤더에 담아 서버가 허용한 API를 사용할 수 있다.

보통 Access Token을 짧게 설정(보안 문제)하고 Refresh Token은 길게 설정한다. Refresh Token을 이용해 만료된 Access Token을 재발급 할 수 있다.
만약 Refresh Token이 유출 될 시, 서버에서는 두 토큰 모두 폐기해야한다. 
