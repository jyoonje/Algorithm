Java Record란? - DTO객체를 Record로 사용하는 이유


1. Record란?

자바에서 Record 타입은 자바 14부터 도입된 기능으로, 불변의 데이터를 담는 간단한 데이터 운반체(data carrier)의 생성을 목적으로 한다.
 
기존의 자바코드에서는 데이터 전용 클래스를 정의하기 위해 많은 보일러 플레이트(자동 생성된 코드)가 필요했다. ( 생성자, 게터, 세터, equals(), toString() ... )

Record에서는 이런 불편함을 해소해주며, 간결한 문법으로 데이터를 표현할 수 있게 해준다.


2. Record의 특성

1) 불변성: Record의 모든 필드는 불변하다. 따라서 한 번 생성되면 그 값을 변경할 수 없다.
2) 표준 메소드 자동 제공: equals(), hashcode(), toString()과 같은 메소드가 자동으로 제공된다.
3) 제한된 상속: Record는 다른 클래스를 상속받을 수 없으며, 상속되도록 할 수 없다.


3. Record를 사용하는 이유

1) 간결성: DTO와 같은 데이터 전용 클래스를 정의할 때 필수적인 보일러플레이트 코드를 줄일 수 있다.
2) 명확한 의도: Record를 사용함으로써 해당 클래스가 데이터 전용임을 명확히 나타낼 수 있다.
3) 불변성 보장: Record는 데이터의 불변성을 보장함으로써 버그 발생을 최소화하고 코드의 안정성을 향상시킨다.


4. Entity 객체를 Record 타입으로 정의하지 않는 이유

Entity 객체는 데이터 베이스의 테이블과 매핑되어 데이터를 영속화하는 역할을 한다.

1) 변경 가능성: Entity 객체는 생명주기 동안 여러 상태 변화를 겪을 수 있다. 예를 들어, JPA에서는 Entity의 상태를 관리하며, 이를 통해 DB와의 동기화를 담당한다. Record 타입은 불변 객체이기 때문에 이러한 상태 변화를 표현하는 데 제한적이다.
2) 지연 로딩과 같은 JPA 특징 사용: Entity 클래스를 사용하면 JPA의 지연 로딩 같은 고급 기능을 사용할 수 있다. 이는 성능 최적화에 도움이 된다. Record 타입은 이러한 기능을 지원하기 위한 프록시나 다른 메커니즘을 사용하는 데 제한적일 수 있다.
