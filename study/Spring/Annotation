어노테이션 정리


어노테이션은 사전적 의미로는 주석이라는 뜻이다.
자바에서 사용될 때의 어노테이션은 코드 사이에 주석처럼 쓰여서 특별한 의미, 기능을 수행하도록 하는 기술이다.
즉, 프로그램에게 추가적인 정보를 제공해주는 메타데이터(데이터를 위한 데이터)라고 볼 수 있다.
주석은 '사람'에게 정보를 제공하는 것이라면, 어노테이션은 특정 코드를 사용하는 '프로그램'에게 정보를 전달한다.


1. 어노테이션의 역할
1) 컴파일러에게 문법 에러를 체크하도록 정보를 제공한다.
2) ide가 빌드 혹은 배치 시 코드를 자동으로 생성할 수 있도록 정보를 제공한다.
3) 런타임 시점에 특정 기능을 실행하도록 정보를 제공한다.


2. 기본적으로 어노테이션을 사용하는 순서는 다음과 같다.
1) 어노테이션의 정의
2) 클래스에 어노테이션을 배치
3) 코드가 실행되는 중에 Reflection을 이용하여 추가 정보를 획득하여 기능 실시


3. 어노테이션의 종류
: 어노테이션을 직접 개발하기 위해서는 Java에서 제공하는 어노테이션에 대해 먼저 알아야한다.
Java의 어노테이션은 크게 built-in Annotation과 Meta Annotation이 존재한다.

1) built-in Annotation
- Java 코드에 적용되는 어노테이션
- @Override, @Deprecated, @SuppressWarnings 등이 존재

2) meta Annotation
- 다른 어노테이션에 적용되기 위한 어노테이션
- @Documented, @Target 등이 존재

4. meta 어노테이션의 종류
- Retention: 해당 어노테이션의 정보를 어느 범위까지 유지할 것인지를 설정함
1) RetentionPolicy.SOURCE: 컴파일 전까지만 유효하며 컴파일 이후에는 사라짐
2) RetentionPolicy.CLASS: 컴파일러가 클래스를 참조할 때까지 유효함
3) RetentionPolicy.RUNTIME: Reflection을 사용하여 컴파일 이후에도 JVM에 의해 계속 참조가 가능함
4) Documented: JavaDoc 생성 시 Document에 포함되도록 함
5) Target: 해당 어노테이션이 사용되는 위치를 결정함
6) ElementType.PACKAGE : 패키지 선언시
7) ElementType.TYPE : 타입 선언시
8) ElementType.CONSTRUCTOR : 생성자 선언시
9) ElementType.FIELD : 맴버 변수 선언시
10) ElementType.METHOD : 메소드 선언시
11) ElementType.ANNOTATION_TYPE : 어노테이션 타입 선언시
12) ElementType.LOCAL_VARIABLE : 지역 변수 선언시
13) ElementType.TYPE_PARAMETER : 매개 변수 타입 선언시
14) Inherited: 해당 어노테이션을 하위 클래스에 적용함
15) Repeatable: Java8부터 지원하며, 연속적으로 어노테이션을 선언하는 것을 허용함
