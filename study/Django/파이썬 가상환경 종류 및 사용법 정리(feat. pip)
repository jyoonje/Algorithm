파이썬 가상환경 종류 및 사용법 정리(feat. pip)


파이썬에는 여러 가상환경을 만드는 방법을 제공하고있다. 이 가상환경이라는 개념을 처음 접해보면 어려운 면이 있는데, 그에 관해 정리해보겠다.


1. 파이썬 가상환경

: 정의부터 말하자면, 파이썬 개발에서 가상환경(Virtual Environment)은 Python 및 관련 패키지를 프로젝트 단위로 독립적으로 관리할 수 있는 격리된 Python 실행 환경을 의미한다.

프로젝트를 진행하다 보면 여러 모듈을 설치하게 된다. 각 모듈은 서로 의존성(dependency)을 가지는 경우가 많기 때문에 글로벌하게 모듈을 설치하게 되면 여러 프로젝트를 관리하기 어렵다.

예를 들어 프로젝트1 에서는 모듈 A와 B를, 프로젝트2 에서는 모듈 A와 C를 사용하는 상황이라고 생각해보자.

모듈B를 사용하려면 1.x 버전의 모듈A가 필요하고, 모듈C를 사용하려면 2.x버전의 모듈A가 필요하다. 

모듈을 글로벌 환경에 설치한다면 단 하나의 모듈A만 설치할 수 있으므로 두 프로젝트를 모두 관리할 수 없게된다.

따라서, 각각의 프로젝트에 필요한 모듈을 별도의 로컬 환경에 설치하여 사용하게 되는데, 이를 가상환경이라고 한다.

파이썬은 일반적으로 pip을 이용하여 모듈을 설치하는데, pip은 글로벌 환경에 모듈을 설치하기 때문에 가상환경이라는 개념을 적용하게 된 것이다.


* pip(Pip Installs Package) 이란?

: 파이썬 pip(Pip Installs Packages)는 파이썬 패키지 관리자이다.

파이썬을 다운로드할 때 pip는 기본적으로 함께 설치된다. 즉, 파이썬을 설치하면 pip도 자동으로 설치되어 제공된다.

pip는 파이썬 패키지를 검색, 설치, 업그레이드, 제거할 수 있게 해주는 도구이다. 파이썬 개발자들은 pip를 사용하여 필요한 외부 라이브러리와 프레임워크를 쉽게 설치할 수 있다.



2. 파이썬 가상환경의 종류

: 파이썬 표준 라이브러리에서 지원하는 가상환경과, 그렇지 않은 비표준 라이브러리가 있다.

표준 라이브러리는 설치 없이 사용할 수 있지만, 비표준 라이브러리는 별도의 설치가 필요하다.

- 비표준 라이브러리

1) virtualenv: 비표준 라이브러리 중 가장 많이 사용되는 가상환경 라이브러리이다. 
표준 라이브러리는 아니지만 PyPA에서 공인된 라이브러리로, venv와 사용법이 유사하지만 Python 2, 3을 모두 지원한다는 장점 때문에 많이 사용된다.

2) pyenv: 파이썬 버전별로 환경 생성이 가능한 라이브러리로, 파이썬 버전 관리 기능을 제공해준다고 생각할 수 있다. Windows를 지원하지 않는다.

그 외에도 pyenv-virtualenv, virtualenvwrapper, pyenv-virtualenvwrapper, pipenv 가 있다.

- 표준 라이브러리

1) venv: Python 3.3부터 사용 가능한 가상환경 라이브러리이다. 
현재 기준으로 유일하게 표준 라이브러리에서 지원하는 가상환경 라이브러리이다. virtualenv의 경량화 모듈로 생각할 수 있으며, 실제로 두 라이브러리는 상당히 유사하다. venv는 Python 2.x가 지원되지 않는 등 virtualenv보다 기능적으로는 조금 부족하다는 평가를 받지만 별도의 설치 없이 표준 라이브러리로 제공된다는 장점 때문에 많이 사용된다.

2) pyvenv: venv와 거의 유사한 가상환경 라이브러리이다. Python 3.3d에서 추가되었으나, Python 3.8에서 제거되었다. 아마도 pyenv와 이름이 유사하여 혼란을 피하고자 venv로 기능을 옮긴 후 삭제된 것으로 추측된다.



3. 가상환경 사용법(venv를 사용한 방식)

1) 가상환경 생성: "python -m venv 가상환경이름" 
- 가상환경 이름을 명시해주고 명령어를 실행한다. 
가상환경이 잘 생성 되었다면 루트 디렉토리에 해당 이름으로 폴더가 생성된다.
일반적으로 가상환경 이름은 .venv로 정하는 것이 관례이다.
생성된 가상환경 디렉토리(.venv)를 보면 Include, Lib, Scripts, pyvenv.cfg로 구성되고, 여기에서 Lib에 설치한 모듈이 저장된다.

2) 가상환경 활성화(Windows): "call 가상환경이름/Scripts/activate" 또는 "가상환경이름/Scripts/activate"
- 실행할 가상환경의 이름을 명시해주고 명령어를 실행한다. 이름을 명시한다는 것은 하나의 루트 디렉토리에 여러개의 가상환경을 만들고, 원하는 것을 활성화하여 프로그램을 실행할 수도 있다는 것이다.
가상환경을 활성화하면 커맨드 라인 좌측에 가상환경 이름이 표시된다.

3) 가상환경 모듈 설치: "pip install 모듈"
- 가상환경 내에 설치할 뿐, 설치하는 방법과 과정은 글로벌 환경에서 설치하는 것과 같다.
모듈을 설치하면, Lib 폴더에 모듈이 추가된다.

4) 가상환경 비활성화: "deactivate"
- 가상환경을 더 이상 사용하지 않을 것이라면 해당 명령어로 비활성화해준다.
해당 명령을 수행하면 가상환경을 빠져나와 일반 터미널로 돌아간다.

5) 가상환경 삭제: 해당 폴더를 삭제한다.





























