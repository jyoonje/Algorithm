[Django] 함수형 뷰와 클래스형 뷰 정리



1. 함수형 뷰(FBV)

- 특징
1) 함수의 집합으로 정의된다. 간단하고 가벼운 기능을 구현하는 경우 유용하다.
2) 매개변수로 request를 받으며, HttpResponse를 반환한다.
3) DB 연동은 직접 연결 또는 ORM을 사용할 수 있다.


- 장점
1) 구현이 간단하고 가독성이 좋다.
2) 사용자의 요청을 함수로 받아 처리하기 때문에 예상하지 못한 부작용이 적다.
3) 구현한 뷰 함수를 다른 뷰 함수에서 호출하여 재사용할 수 있다. 


- 단점
1) 복잡한 로직을 구현하기 어려우며, 가독성이 급격하게 떨어진다.
2) 함수로 독립된 로직이 많이 생길 경우 유지보수에 불리하다.
3) 클래스 기반 뷰에 비해 상대적으로 재사용성이 떨어진다.


요약: FBV는 간단한 기능을 구현할 때 사용하기 좋다.



2. 클래스형 뷰(CBV)

- 특징 및 장점
1) 클래스를 먼저 정의하고 그 안에서 뷰를 처리하는 메서드를 구현한다.
여기서 메서드란 HTTP 요청을 처리하고 응답을 반환하는 메서드를 가리킨다.
2) 객체지향의 특징인 상속, 오버라이딩 등을 적극적으로 활용하기 때문에 재사용성이 높다.
3) 위와 같은 이유로 코드의 유지보수가 상대적으로 쉽고 가독성이 뛰어나다.
4) 개발 시간 단축 - CBV는 Django에서 기본적으로 제공하는 "제네릭 뷰"를 상속받아 작성한다.
   이 제네릭 뷰에는 개발에 필요한 많은 뷰가 이미 구현되어 있기 때문에, 잘 사용한다면 개발 시간이 단축될 수 있다.


- 단점
1) 복잡하며, 러닝커브가 가파르다.
: 개발자의 지식과 구현 기능의 규모에 따라 적절한 뷰 함수가 선택된다. 
이 과정에서 구현 방식에 따라 코드가 복잡해질 가능성이 있으며, 객체 지향 프로그래밍 및 제네릭 뷰에 대한 선행학습이 필요하므로 러닝커브가 가파르다.
2) 코드의 길이가 길어질 수 있다.
: 복잡한 기능 구현 시 여러가지 상속으로 인해 코드가 길어질 수 있다.
3) 데코레이터를 사용할 수 없다.
:이 때문에 일부 개발자들은 함수형 뷰를 선호하기도 한다.






