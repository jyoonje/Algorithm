MVT 패턴과 MVC 패턴의 차이점


1. 의미

- MVC
: 프로젝트의 구성 요소를 Model, View, Controller 세 가지로 역할에 따라 구분하는 Spring Framework의 디자인 패턴이다.

- MVT
: 프로젝트의 구성 요소를 Model, View, Template 세 가지로 역할에 따라 구분하는 Django의 디자인 패턴이다.


2. MVC 패턴의 특징

- MVC 패턴
: Model, View, Controller로 구분하는 MVC 패턴에서 중요한 점은, 각각의 구성 요소가 다른 구성 요소들에게 영향을 미치지 않아야 한다는 것이다.
-> 구성 요소간의 간섭 없이 각자의 역할에만 충실해야 한다.

각 구성 요소의 역할은 다음과 같다.
1) Model (모델)
: 데이터를 가지고 있으며, 데이터를 처리하는 로직 또한 가지고 있다.

2) View (뷰)
: 화면의 요청에 대한 결과물을 보여주는 역할을 한다.

3) Controller (컨트롤러)
: 모델과 뷰를 이어주는 역할을 한다. 
요청에 따라 모델에게 적절한 로직을 가동하도록 알려주고, 모델이 응답하면 해당 응답을 뷰에 전달하는 역할을 한다.



3. MVC 패턴의 예시

1)유저가 컨트롤러에 요청을 보냅니다.(예시 : 뷰에 있는 Submit 버튼을 누른다)

2) 컨트롤러가 모델에 요청사항대로 데이터를 수정할 것을 지시합니다.

3) 모델은 지시받은대로 데이터를 수정하고 컨트롤러에게 완료되었음을 알려줍니다.

4) 컨트롤러는 수정된 데이터를 토대로 표시할 뷰를 결정하고 화면을 출력할 것을 지시합니다.

5) 뷰는 지시받은대로 화면을 출력합니다.


4. MVC 패턴의 장점과 한계

장점: MVC 패턴은 각각의 구성 요소가 분리되어 본연의 역할에만 충실한 구조이므로 유연성이 높고 유지보수가 용이하며 개발자와 디자이너의 작업 영역을 분리할 수 있다는 장점이 있다.

한계: 프로젝트의 규모가 커질수록 컨트롤러가 비대화되고 모델과 뷰의 의존성을 완벽히 분리할 수가 없기 때문에 유지보수가 점점 어려워진다.



5. MVT 패턴의 특징

: MVT 패턴은 Django의 디자인 패턴이다.

MVT 패턴은 명칭이 조금 다를 뿐, 기본적인 골자는 MVC 패턴과 동일하다.

MVT 패턴만의 특징을 알아보자면, 

- Model (모델)
: MVC 패턴의 모델에 대응되며 DB에 저장되는 데이터를 의미한다.
모델은 클래스로 정의되며 하나의 클래스가 하나의 DB 테이블이다.
원래 DB를 조작하기 위해선 SQL을 다룰 줄 알아야 하지만 Django는 ORM 기능을 지원하기 때문에 파이썬 코드로 DB를 조작할 수 있다.

- Template(템플릿)
: MVC 패턴의 뷰에 대응되며 유저에게 보여지는 화면을 의미한다.
장고는 뷰에서 로직을 처리한 후 HTML 파일을 context와 함께 렌더링하는데, 이 때의 HTML 파일을 템플릿이라 칭한다.
Django는 자체적인 Django Template 문법을 지원하며 이 문법 덕분에 HTML 파일 내에서 context로 받은 데이터를 활용할 수 있다.

- View(뷰)
: MVC 패턴의 컨트롤러에 대응되며 요청에 따라 적절한 로직을 수행하여 결과를 템플릿으로 렌더링하며 응답한다.
(항상 템플릿을 렌더링 하는 것은 아니고 백엔드에서 데이터만 주고 받는 경우도 있다.)

* 여기에 장고는 URLConf(URL 설계)라는 단계가 하나 더 있는데,
URL 패턴을 정의하여 해당 URL과 뷰를 매핑하는 단계라고 생각하면 된다.



6. MVT 패턴의 예시

1) 유저가 특정 url로 요청을 보낸다.

2) urlConf를 통해 해당 url과 매핑된 뷰를 호출한다.

3) 호출된 뷰는 적절한 로직을 수행하며 그 과정에서 모델에게 CRUD를 지시한다.

4) 모델은 ORM을 통해 DB와 데이터를 주고받으며 CRUD를 수행한다.

5) 렌더링된 최종 결과를 유저에게 템플릿으로 반환한다.











